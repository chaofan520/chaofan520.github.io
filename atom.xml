<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhangchaofan&#39;s blog</title>
  
  <subtitle>慢慢沉淀下来</subtitle>
  <link href="https://zhangchaofan01.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://zhangchaofan01.gitee.io/"/>
  <updated>2024-08-25T06:57:28.437Z</updated>
  <id>https://zhangchaofan01.gitee.io/</id>
  
  <author>
    <name>zhangchaofan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux查看GPU状态</title>
    <link href="https://zhangchaofan01.gitee.io/2024/08/25/linux-cha-kan-gpu-zhuang-tai/"/>
    <id>https://zhangchaofan01.gitee.io/2024/08/25/linux-cha-kan-gpu-zhuang-tai/</id>
    <published>2024-08-25T06:36:49.000Z</published>
    <updated>2024-08-25T06:57:28.437Z</updated>
    
    <content type="html"><![CDATA[<p>在日常的训练过程中，你可能需要经常查看当前GPU的使用状态(类似于Linux的Top)。有很多命令可以做到。</p><h3 id="1-nvidia-smi"><a href="#1-nvidia-smi" class="headerlink" title="1. nvidia-smi"></a>1. nvidia-smi</h3><p>&emsp;&emsp;这个命令是基础，一般你系统装完CUDA都会有。这里详细的记录了当前系统的GPU数量和相应GPU的具体信息，比如这里只有一张3090显卡，他的满载功耗为350W，显存为24G，当前正在运行一个任务，性能占用为14%。</p><pre class="line-numbers language-none"><code class="language-none">Sun Aug 25 14:44:25 2024       +-----------------------------------------------------------------------------+| NVIDIA-SMI 510.60.02    Driver Version: 510.60.02    CUDA Version: 11.6     ||-------------------------------+----------------------+----------------------+| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC || Fan  Temp  Perf  Pwr:Usage&#x2F;Cap|         Memory-Usage | GPU-Util  Compute M. ||                               |                      |               MIG M. ||&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;||   0  NVIDIA GeForce ...  Off  | 00000000:3B:00.0 Off |                  N&#x2F;A ||  0%   49C    P2   112W &#x2F; 350W |   1639MiB &#x2F; 24576MiB |     14%      Default ||                               |                      |                  N&#x2F;A |+-------------------------------+----------------------+----------------------+                                                                               +-----------------------------------------------------------------------------+| Processes:                                                                  ||  GPU   GI   CI        PID   Type   Process name                  GPU Memory ||        ID   ID                                                   Usage      ||&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;||    0   N&#x2F;A  N&#x2F;A    723829      C   python                           1637MiB |+-----------------------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;但是<code>nvidia-smi</code>只显示你运行命令时刻的GPU状态，你可以使用<code>watch</code>获得显卡每个时刻的状态：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 这里的1 是 每一秒刷新的意思watch -n 1 nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-gpustate"><a href="#2-gpustate" class="headerlink" title="2. gpustate"></a>2. gpustate</h3><p>&emsp;&emsp;你也可以使用<code>gpustate</code>命令来获取简洁的状态，也可以配合<code>watch</code>命令获得长时间的状态。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 首先得安装gpustatepip intall gpustategpustate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">AMP Sun Aug 25 14:49:10 2024  510.60.02[0] NVIDIA GeForce RTX 3090 | 44°C,   7 % |  1639 &#x2F; 24576 MB | chaofan(1637M)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-nvitop"><a href="#3-nvitop" class="headerlink" title="3. nvitop"></a>3. nvitop</h3><p>&emsp;&emsp;我最喜欢的则是<code>nvitop</code>,他的输出类似于<code>nvidia-smi</code>，但输出信息更丰富，会出来一个类似<code>top</code>命令的窗口，自动更新当前GPU+CPU状态。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 首先得安装</span>pip install nvitop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://imgse.com/i/pAF7Ox0"><img src="https://s21.ax1x.com/2024/08/25/pAF7Ox0.png" alt="pAF7Ox0.png"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在日常的训练过程中，你可能需要经常查看当前GPU的使用状态(类似于Linux的Top)。有很多命令可以做到。&lt;/p&gt;
&lt;h3 id=&quot;1-nvidia-smi&quot;&gt;&lt;a href=&quot;#1-nvidia-smi&quot; class=&quot;headerlink&quot; title=&quot;1. nvi</summary>
      
    
    
    
    
    <category term="linux" scheme="https://zhangchaofan01.gitee.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Circos example</title>
    <link href="https://zhangchaofan01.gitee.io/2023/12/29/circos-example/"/>
    <id>https://zhangchaofan01.gitee.io/2023/12/29/circos-example/</id>
    <published>2023-12-29T12:54:29.000Z</published>
    <updated>2023-12-29T12:55:26.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Circos流程记录"><a href="#Circos流程记录" class="headerlink" title="Circos流程记录"></a>Circos流程记录</h1><p>&emsp;&emsp;最近要用到Circos进行绘图，因此进行记录，方便下次绘图。</p><h2 id="0-软件安装"><a href="#0-软件安装" class="headerlink" title="0. 软件安装"></a>0. 软件安装</h2><p>&emsp;&emsp;<code>Circos</code>基于<code>Perl</code>，所以我们需要进行大量<code>Perl</code>包的安装。当然，秉着赌狗的心理，我们看看能不能直接通过<code>conda</code>装。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># conda新建名为 Circos 的环境(每次安装独立的软件时，都建议新建一个conda环境安装，不容易出现什么安装冲突)conda create -n Circos# 激活环境conda activate Circos# 通过bioconda源搜索circos，看看有哪些版本conda search circos -c bioconda# 这里我们安装最新的 0.69.9conda install circos&#x3D;0.69.9 -c bioconda# 这里没有报错，直接输入 y 进行安装# conda安装后 检查是否有依赖缺失circos --modules<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们缺少<code>GD</code>和<code>GD::Polyline</code>模块。</p><p><a href="https://imgse.com/i/piT0g76"><img src="https://s11.ax1x.com/2023/12/21/piT0g76.png" alt="piT0g76.png"></a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 通过 conda 安装 libgd 依赖conda install -c fastchan libgd# 通过 conda 安装 perl-gd (perl的gd模块)conda install -c bioconda perl-gd# 如果libwebp这个版本装不上，就直接把版本号去掉安装，然后在conda这个环境的lib文件夹下 &quot;骗软件&quot;# ln -s libwebp.so.7 libwebp.so.6conda install -c conda-forge libwebp&#x3D;0.5.2# 最后检查一遍，一般help文档能出来就说明装成功了circos -h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgse.com/i/piTB1UK"><img src="https://s11.ax1x.com/2023/12/21/piTB1UK.md.png" alt="piTB1UK.md.png"></a></p><h2 id="1-Circos的使用"><a href="#1-Circos的使用" class="headerlink" title="1. Circos的使用"></a>1. Circos的使用</h2><h3 id="1-1-绘制染色体-karyotype"><a href="#1-1-绘制染色体-karyotype" class="headerlink" title="1.1 绘制染色体(karyotype)"></a>1.1 绘制染色体(karyotype)</h3><p>&emsp;&emsp;我们首先需要准备一个<code>karyotype</code>文件，这个文件描述了所绘制染色体的基本信息。这个文件由七列构成，无表头，任意空白字符分割即可。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">faidx ..&#x2F;nextDevono.fa -i chromsizes | sort -nr -k2 | awk &#39;&#123;print &quot;chr&quot;, &quot;-&quot;, $1,NR,&quot;0&quot;,$2, &quot;169,69,255&quot;&#125;&#39; &gt; karyotype.txtfaidx &#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;06.daily&#x2F;20.Alternata_gff&#x2F;04.final_res&#x2F;Z7.fa -i chromsizes | sort -n -k2 | awk &#39;&#123;print &quot;chr&quot;, &quot;-&quot;, $1,13-NR,&quot;0&quot;,$2, &quot;6,97,118&quot;&#125;&#39; &gt;&gt; karyotype.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;这里我们的结果文件如下所示:</p><pre class="line-numbers language-txt" data-language="txt"><div class="caption"><span>karyotype.txt</span></div><code class="language-txt"># 这里前两列是karyotype固定的，代表绘制染色体# 第三列是染色体ID，也是其他配置文件的坐标锚点# 第四列是具体展示在图上的染色体名称# 第五、六列是染色体起始、终止位置 起着展示染色体长度的信息# 第七列则是染色体方块的颜色，这里名称为RGB颜色chr - ctg000130 1 0 6741225 169,69,255chr - ctg000050 2 0 5683444 169,69,255chr - ctg000120 3 0 3309307 169,69,255chr - ctg000020 4 0 3201804 169,69,255chr - ctg000100 5 0 2838009 169,69,255chr - ctg000040 6 0 2659068 169,69,255chr - ctg000030 7 0 2635818 169,69,255chr - ctg000110 8 0 2444020 169,69,255chr - ctg000010 9 0 2417686 169,69,255chr - ctg000000 10 0 1868462 169,69,255chr - ctg000090 11 0 561846 169,69,255chr - ctg000070 12 0 75900 169,69,255chr - ctg000080 13 0 72450 169,69,255chr - ctg000060 14 0 61073 169,69,255chr - 12 12 0 416412 6,97,118chr - 11 11 0 561391 6,97,118chr - 10 10 0 1841737 6,97,118chr - 9 9 0 2401432 6,97,118chr - 8 8 0 2464928 6,97,118chr - 7 7 0 2519108 6,97,118chr - 6 6 0 2544158 6,97,118chr - 5 5 0 2863349 6,97,118chr - 4 4 0 3085453 6,97,118chr - 3 3 0 3269484 6,97,118chr - 2 2 0 5542836 6,97,118chr - 1 1 0 6770053 6,97,118<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;我们先生成一个染色体的配置文件<code>ideogram.conf</code>，将以下内容放到这个文件中，展示我们上面生成的染色体形状。</p><pre class="line-numbers language-txt" data-language="txt"><div class="caption"><span>ideogram.conf</span></div><code class="language-txt">#指定染色体文件（绝对&#x2F;相对路径+文件名）##########################################################################&lt;ideogram&gt;                #这是定义染色体相关参数的标签，相当于HTML的一个条目&lt;spacing&gt;                 #定义染色体间隙宽度的标签，以&lt;&#x2F;spacing&gt;，其中包括要设置的参数default &#x3D; 0.006r          #r指的是圆的周长，设置0.5%圆的周长为间隙&lt;pairwise 1;ctg000130&gt;       #可以用&lt;pairwise&gt;标签特别指定某些染色体的间隙（用的是ID），因为在大多数文章中，都会留一个大间隙，来放labelspacing &#x3D; 5r            #这里20r表示是相对default &#x3D; 0.005r的20倍，也就是10%的圆的周长&lt;&#x2F;pairwise&gt;              #标签都要以&lt;&#x2F;&gt;结尾，&lt;pairwise 12;ctg000060&gt;spacing &#x3D; 5r&lt;&#x2F;pairwise&gt;&lt;&#x2F;spacing&gt;                #间隙定义结束，下面是对染色体样式的调整radius           &#x3D; 0.65r  #轮廓的位置，这里的r指的是半径，由圆心到圆周上范围依次是0-1r，，超出部分将不再显示。thickness        &#x3D; 20p    #染色体整体的宽度，这里p指的是像素大小，也可以用r表示，1r&#x3D;1500pfill             &#x3D; yes    #是否为染色体填充颜色，如果为yes，自动用第七列定义的颜色着色stroke_color     &#x3D; dgrey  #染色体边框的颜色，支持多种格式的输入，如：red或255,182,106stroke_thickness &#x3D; 2p     #染色体边框的粗细show_label     &#x3D; yes # 展示染色体IDlabel_with_tag &#x3D; yes # tag 标识是否包含到 label 中label_font     &#x3D; bold # label 的字体label_center   &#x3D; yeslabel_size     &#x3D; 32plabel_color    &#x3D; greylabel_parallel &#x3D; yes # label方向， 是否与圆外圈平行label_case     &#x3D; upper # label 的大小写：upper,lowerlabel_radius &#x3D; 0.98r&lt;&#x2F;ideogram&gt;               #定义染色体属性的标签结束##########################################################################<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再配置一个基础的运行<code>conf</code>文件: Alternaria.conf</p><pre class="line-numbers language-txt" data-language="txt"><div class="caption"><span>Alternaria.conf</span></div><code class="language-txt">##########################################################################chromosomes_units           &#x3D; 100000 # 设置u的单位，1u &#x3D; 100kbpkaryotype &#x3D; .&#x2F;karyotype.txt&lt;&lt;include ideogram.conf&gt;&gt;#下面是每次都要复制粘贴上去的，他们属于circos自带的配置文件，用于调用颜色，距离，报错等信息&lt;image&gt;                    #注意路径&lt;&lt;include etc&#x2F;image.conf&gt;&gt; #注意引用外部配置文件需要使用&lt;&lt;#&gt;&gt;&lt;&#x2F;image&gt;&lt;&lt;include etc&#x2F;colors_fonts_patterns.conf&gt;&gt; &lt;&lt;include etc&#x2F;housekeeping.conf&gt;&gt;##########################################################################<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">circos -conf Alternaria.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们得到了初步的染色体结果:</p><p><a href="https://imgse.com/i/pi7E1Pg"><img src="https://s11.ax1x.com/2023/12/22/pi7E1Pg.png" alt="pi7E1Pg.png"></a></p><p>我们再配置一个<code>ticks.conf</code>文件，加上染色体ID及刻度线。</p><pre class="line-numbers language-txt" data-language="txt"><div class="caption"><span>ticks.conf</span></div><code class="language-txt">########################################################################### 配置染色体标签和刻度线show_ticks          &#x3D; yes  #选择yes表示要显示刻度线show_tick_labels    &#x3D; yes  #选择yes表示要显示刻度线的数值#定义刻度线的整体位置与形状&lt;ticks&gt;                    #刻度线的转用标签，但凡是复数出现的，其下面的参数都表示全局参数，像下面的&lt;tick&gt;单数形式，都表示局部参数radius           &#x3D; 1r      #刻度线的位置，1r为最远距离，超过1r不再显示color            &#x3D; blackthickness        &#x3D; 3pmultiplier       &#x3D; 1e-6    #刻度标签的大小，这里我们一个标签&#x3D;10u，这里大刻度就是1&#x3D;1M,如果multiplier&#x3D;1e-5,那这里的刻度就是10format           &#x3D; %d      #然后以整数的形式标记在刻度线上#定义小的刻度线，且不显示数值&lt;tick&gt;spacing        &#x3D; 1u        #最开始我们定义1u &#x3D; multiplier &#x3D; 100000，表示一个小刻度为100kbpsize           &#x3D; 8pshow_label     &#x3D; no        # 是否展示小刻度线&lt;&#x2F;tick&gt;#定义大的刻度线，显示数值&lt;tick&gt;spacing        &#x3D; 10u # 这里设置一个大刻度为10个小刻度size           &#x3D; 20pshow_label     &#x3D; yeslabel_size     &#x3D; 30plabel_offset   &#x3D; 10p      #设置数值和刻度线之间的间隔format         &#x3D; %d&lt;&#x2F;tick&gt;&lt;&#x2F;ticks&gt;##########################################################################<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再在Alternaria.conf中加入这个<code>ticks.conf</code></p><pre class="line-numbers language-txt" data-language="txt"><div class="caption"><span>Alternaria.conf</span></div><code class="language-txt">##########################################################################chromosomes_units           &#x3D; 100000 # 设置u的单位，1u &#x3D; 100kbpkaryotype &#x3D; .&#x2F;karyotype.txt&lt;&lt;include ideogram.conf&gt;&gt;&lt;&lt;include ticks.conf&gt;&gt;#下面是每次都要复制粘贴上去的，他们属于circos自带的配置文件，用于调用颜色，距离，报错等信息&lt;image&gt;                    #注意路径&lt;&lt;include etc&#x2F;image.conf&gt;&gt; #注意引用外部配置文件需要使用&lt;&lt;#&gt;&gt;&lt;&#x2F;image&gt;&lt;&lt;include etc&#x2F;colors_fonts_patterns.conf&gt;&gt; &lt;&lt;include etc&#x2F;housekeeping.conf&gt;&gt;##########################################################################<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 运行circos -conf Alternaria.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://imgse.com/i/pi7EBiF"><img src="https://s11.ax1x.com/2023/12/22/pi7EBiF.png" alt="pi7EBiF.png"></a></p><h3 id="1-2-外圈展示GC含量"><a href="#1-2-外圈展示GC含量" class="headerlink" title="1.2 外圈展示GC含量"></a>1.2 外圈展示GC含量</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">faidx ..&#x2F;nextDevono.fa -i chromsizes &gt;  nextDevono.txtfaidx &#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;06.daily&#x2F;20.Alternata_gff&#x2F;04.final_res&#x2F;Z7.fa -i chromsizes &gt;  Z7.txtbedtools makewindows -g nextDevono.txt -w 20000 &gt; gaisen.20kb.winbedtools makewindows -g Z7.txt -w 20000 | sort -n -k 1 -n -k 2  &gt; Z7.20kb.winbedtools nuc -fi ..&#x2F;nextDevono.fa -bed gaisen.20kb.win | \cut -f 1-3,5 | grep -v &quot;#&quot; | \awk -vFS&#x3D;&quot;\t&quot; -vOFS&#x3D;&quot;\t&quot; &#39;&#123;print $1,$2,$3,$4*(100)-50&#125;&#39; &gt; gc.density.txtbedtools nuc -fi &#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;06.daily&#x2F;20.Alternata_gff&#x2F;04.final_res&#x2F;Z7.fa -bed Z7.20kb.win | \cut -f 1-3,5 | grep -v &quot;#&quot; | \awk -vFS&#x3D;&quot;\t&quot; -vOFS&#x3D;&quot;\t&quot; &#39;&#123;print $1,$2,$3,$4*(100)-50&#125;&#39; &gt;&gt; gc.density.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们另外生成一个<code>GC.conf</code>文件。</p><pre class="line-numbers language-txt" data-language="txt"><div class="caption"><span>GC.conf</span></div><code class="language-txt">&lt;plots&gt;    &lt;plot&gt;        type      &#x3D; line #设定显示类型        thickness &#x3D; 2p #折线图的粗细        max_gap &#x3D; 1u         file    &#x3D; gc.density.txt #输入数据        color   &#x3D; vdgrey #折线颜色        min     &#x3D; -5 #环道内圈代表的数值下限，超出下限的数值不会显示，下同        max     &#x3D; 5 #环道外圈代表的数值上限        r0      &#x3D; 1.06r #环道内圈位置        r1      &#x3D; 1.18r #环道外圈位置        fill_color &#x3D; vdgrey_a3        &lt;rules&gt;            &lt;rule&gt; #设置折线图大于0部分显示为蓝色                condition    &#x3D; var(value) &gt; 0                color        &#x3D; blue                fill_color   &#x3D; blue_a1            &lt;&#x2F;rule&gt;            &lt;rule&gt; #设置折线图小于0部分显示为红色                condition    &#x3D; var(value) &lt; 0                color        &#x3D; red                fill_color   &#x3D; red_a1            &lt;&#x2F;rule&gt;        &lt;&#x2F;rules&gt;    &lt;&#x2F;plot&gt;&lt;&#x2F;plots&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgse.com/i/pi7mvBn"><img src="https://s11.ax1x.com/2023/12/22/pi7mvBn.png" alt="pi7mvBn.png"></a></p><h3 id="1-3-外圈展示基因含量"><a href="#1-3-外圈展示基因含量" class="headerlink" title="1.3 外圈展示基因含量"></a>1.3 外圈展示基因含量</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">grep &#39;[[:blank:]]gene[[:blank:]]&#39; ..&#x2F;fungap_out.gff3 | \awk &#39;&#123;print $1&quot;\t&quot;$4&quot;\t&quot;$5&#125;&#39; |bedtools coverage -a gaisen.20kb.win -b - | \cut -f 1-4 &gt; gene.density.txtgrep &#39;[[:blank:]]gene[[:blank:]]&#39; &#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;06.daily&#x2F;20.Alternata_gff&#x2F;04.final_res&#x2F;2023-10-05.corrected.gff3 | \awk &#39;&#123;print $1&quot;\t&quot;$4&quot;\t&quot;$5&#125;&#39; |bedtools coverage -a Z7.20kb.win -b - | \cut -f 1-4 &gt;&gt; gene.density.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们把gene_density信息也加到<code>GC.conf</code>文件。</p><pre class="line-numbers language-txt" data-language="txt"><div class="caption"><span>GC.conf</span></div><code class="language-txt">&lt;plots&gt;    &lt;plot&gt;        type      &#x3D; line #设定显示类型        thickness &#x3D; 2p #折线图的粗细        max_gap &#x3D; 1u         file    &#x3D; gc.density.txt #输入数据        color   &#x3D; vdgrey #折线颜色        min     &#x3D; -5 #环道内圈代表的数值下限，超出下限的数值不会显示，下同        max     &#x3D; 5 #环道外圈代表的数值上限        r0      &#x3D; 1.08r #环道内圈位置        r1      &#x3D; 1.16r #环道外圈位置        fill_color &#x3D; vdgrey_a3        &lt;rules&gt;            &lt;rule&gt; #设置折线图大于0部分显示为蓝色                condition    &#x3D; var(value) &gt; 0                color        &#x3D; blue                fill_color   &#x3D; blue_a1            &lt;&#x2F;rule&gt;            &lt;rule&gt; #设置折线图小于0部分显示为红色                condition    &#x3D; var(value) &lt; 0                color        &#x3D; red                fill_color   &#x3D; red_a1            &lt;&#x2F;rule&gt;        &lt;&#x2F;rules&gt;    &lt;&#x2F;plot&gt;    ########################################## NEW ##########################    &lt;plot&gt;    type      &#x3D; histogram #设定显示类型    thickness &#x3D; 2p #折线图的粗细file &#x3D; gene.density.txtr0 &#x3D; 1.18rr1 &#x3D; 1.26rcolor &#x3D; 114,176,67    &lt;&#x2F;plot&gt;    ########################################## NEW ##########################&lt;&#x2F;plots&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgse.com/i/pi7uvF0"><img src="https://s11.ax1x.com/2023/12/22/pi7uvF0.png" alt="pi7uvF0.png"></a></p><h3 id="1-4-展示共线性基因"><a href="#1-4-展示共线性基因" class="headerlink" title="1.4 展示共线性基因"></a>1.4 展示共线性基因</h3><p>&emsp;&emsp;我们首先通过<code>JCVI</code>鉴定两个基因组上的共线性区域，通过<code>simple</code>文件提取共线性区域。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python -m jcvi.formats.gff bed --type&#x3D;mRNA --key&#x3D;ID Gaisen.gff &gt; Gaisen.bedpython -m jcvi.formats.gff bed --type&#x3D;mRNA --key&#x3D;ID Z7.gff &gt; Z7.bed# 鉴定两个基因组间的共线性基因python -m jcvi.compara.catalog ortholog --dbtype prot Z7 Gaisen --cscore&#x3D;.98 --no_strip_names  # 创建simple文件python -m jcvi.compara.synteny screen --minspan&#x3D;25 --simple Z7.Gaisen.anchors Z7.Gaisen.simple# 从gff文件中提取simple block的区间python jcvi2link.py &#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;06.daily&#x2F;20.Alternata_gff&#x2F;04.final_res&#x2F;2023-10-05.corrected.gff3 ..&#x2F;fungap_out.gff3 &#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;06.daily&#x2F;06.yelu&#x2F;07.genome_assemble&#x2F;07.JCVI&#x2F;Z7.Gaisen.simple link.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>jcvi2link.py</span></div><code class="language-python"><span class="token keyword">from</span> sys <span class="token keyword">import</span> argv<span class="token punctuation">,</span>exit <span class="token keyword">def</span> <span class="token function">gene_dic</span><span class="token punctuation">(</span>gff<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp_dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span>gff<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"#"</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        tmp <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"mRNA"</span><span class="token punctuation">:</span>            tmp_dic<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> tmp_dic<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">5</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"python </span><span class="token interpolation"><span class="token punctuation">&#123;</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string"> [Z7_gff] [Gaisen_gff] [simple_file] [link_txt]"</span></span><span class="token punctuation">)</span>    Z7_dic <span class="token operator">=</span> gene_dic<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    Gaisen_dic <span class="token operator">=</span> gene_dic<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    colors <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"+"</span><span class="token punctuation">:</span><span class="token string">"62,169,8"</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">:</span><span class="token string">"65,182,230"</span><span class="token punctuation">&#125;</span>    ouf_w <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>        Z7_min <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>Z7_dic<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Z7_dic<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        Z7_max <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>Z7_dic<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Z7_dic<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        Gaisen_min <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>Gaisen_dic<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Gaisen_dic<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        Gaisen_max <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>Gaisen_dic<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Gaisen_dic<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ouf_w<span class="token punctuation">.</span>write<span class="token punctuation">(</span>Z7_dic<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>Z7_min<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>Z7_max<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>Gaisen_dic<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>Gaisen_min<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>Gaisen_max<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\tcolor="</span><span class="token operator">+</span>colors<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    ouf_w<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到这样的结果文件:<br><a href="https://imgse.com/i/pi7BPdx"><img src="https://s11.ax1x.com/2023/12/23/pi7BPdx.png" alt="pi7BPdx.png"></a></p><p>我们再配置<code>link.conf</code>文件:</p><pre class="line-numbers language-txt" data-language="txt"><div class="caption"><span>link.conf</span></div><code class="language-txt">&lt;links&gt;&lt;link&gt;file          &#x3D; link.txtribbon        &#x3D; yesradius        &#x3D; 0.95rbezier_radius &#x3D; 0rflat   &#x3D; yes # 强制条带不扭转bezier_radius_purity &#x3D; 0.5thickness     &#x3D; 1&lt;&#x2F;link&gt;&lt;&#x2F;links&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgse.com/i/pi7Dp9S"><img src="https://s11.ax1x.com/2023/12/23/pi7Dp9S.png" alt="pi7Dp9S.png"></a></p><p>当然，还有很多进阶的配置，后面慢慢改。</p><h3 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程:"></a><strong>参考教程</strong>:</h3><ul><li><a href="https://irenexzwen.gitbooks.io/hello-gitbook/content">https://irenexzwen.gitbooks.io/hello-gitbook/content</a></li><li><a href="https://www.jianshu.com/p/9c0d2b9d724e">https://www.jianshu.com/p/9c0d2b9d724e</a></li><li><a href="https://www.jianshu.com/p/e63292c1001c">https://www.jianshu.com/p/e63292c1001c</a></li><li><a href="https://www.jianshu.com/p/78f4ae15d22a">https://www.jianshu.com/p/78f4ae15d22a</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Circos流程记录&quot;&gt;&lt;a href=&quot;#Circos流程记录&quot; class=&quot;headerlink&quot; title=&quot;Circos流程记录&quot;&gt;&lt;/a&gt;Circos流程记录&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近要用到Circos进行绘图，因此进行记录，方便下</summary>
      
    
    
    
    
    <category term="Genome" scheme="https://zhangchaofan01.gitee.io/tags/Genome/"/>
    
    <category term="shell" scheme="https://zhangchaofan01.gitee.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>SYRI Synteny and Rearrangement Identifier</title>
    <link href="https://zhangchaofan01.gitee.io/2023/12/29/syri-synteny-and-rearrangement-identifier/"/>
    <id>https://zhangchaofan01.gitee.io/2023/12/29/syri-synteny-and-rearrangement-identifier/</id>
    <published>2023-12-29T12:41:43.000Z</published>
    <updated>2023-12-29T13:09:46.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用SYRI鉴定基因组变异及可视化"><a href="#使用SYRI鉴定基因组变异及可视化" class="headerlink" title="使用SYRI鉴定基因组变异及可视化"></a>使用SYRI鉴定基因组变异及可视化</h1><h3 id="1-调整两条比对基因组的染色体方向"><a href="#1-调整两条比对基因组的染色体方向" class="headerlink" title="1.调整两条比对基因组的染色体方向"></a>1.调整两条比对基因组的染色体方向</h3><p><code>SYRI</code>对比对的基因组有非常严格的要求：</p><ol><li>两个基因组的染色体ID必须一一对应(同源染色体ID必须一致，染色体数量也必须一致，染色体ID不能是数字)； </li><li>同源染色体strand方向必须一致。</li></ol><p>&emsp;&emsp;我们根据之前已有的共线性关系，手动生成一个染色体操作表格，然后用<code>pythpn</code>代码进行ID替换与strand方向的改变。</p><p>&emsp;&emsp;这里<code>RAW_ID</code>是其中一个样基因组染色体ID，<code>NEW_ID</code>是新的染色体ID，这个与另外一个样本的染色体ID是一一对应的(另外一个样本的染色体ID就是这种1,2,3,4..11), <code>STRAND</code>为链的方向，<code>+</code>代表两个样本这条染色体方向一致，<code>-</code>代表方向相反，需手动生成反向互补链。<br><strong>替换表格</strong>:</p><table><thead><tr><th>RAW_ID</th><th>NEW_ID</th><th>STRAND</th></tr></thead><tbody><tr><td>ctg000130</td><td>Chr1</td><td>+</td></tr><tr><td>ctg000050</td><td>Chr2</td><td>-</td></tr><tr><td>ctg000120</td><td>Chr3</td><td>+</td></tr><tr><td>ctg000020</td><td>Chr4</td><td>-</td></tr><tr><td>ctg000100</td><td>Chr5</td><td>+</td></tr><tr><td>ctg000040</td><td>Chr6</td><td>-</td></tr><tr><td>ctg000030</td><td>Chr7</td><td>+</td></tr><tr><td>ctg000110</td><td>Chr8</td><td>-</td></tr><tr><td>ctg000010</td><td>Chr9</td><td>+</td></tr><tr><td>ctg000000</td><td>Chr10</td><td>-</td></tr><tr><td>ctg000090</td><td>Chr11</td><td>-</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sys <span class="token keyword">import</span> argv<span class="token punctuation">,</span> exit<span class="token keyword">def</span> <span class="token function">read_fa</span><span class="token punctuation">(</span>fa_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp_dic <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fa_file<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'>'</span><span class="token punctuation">:</span>            tmp_dic<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp_dic<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    tmp_dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>t_lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>t_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> t_lst <span class="token keyword">in</span> tmp_dic<span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> tmp_dic<span class="token keyword">def</span> <span class="token function">reverse_complement</span><span class="token punctuation">(</span>dna_sequence<span class="token punctuation">)</span><span class="token punctuation">:</span>    complement_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">:</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">:</span><span class="token string">'N'</span><span class="token punctuation">&#125;</span>    reverse_sequence <span class="token operator">=</span> dna_sequence<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    complement_sequence <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>complement_dict<span class="token punctuation">[</span>base<span class="token punctuation">]</span> <span class="token keyword">for</span> base <span class="token keyword">in</span> reverse_sequence<span class="token punctuation">)</span>    <span class="token keyword">return</span> complement_sequence<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"python </span><span class="token interpolation"><span class="token punctuation">&#123;</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string"> [raw_fa] [info_tab] [paired_fa]"</span></span><span class="token punctuation">)</span>        info_tab <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"RAW_ID"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        tmp <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        info_tab<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>     raw_fas <span class="token operator">=</span> read_fa<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    ouf_w <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> seq_id <span class="token keyword">in</span> info_tab<span class="token punctuation">:</span>        <span class="token keyword">if</span> info_tab<span class="token punctuation">[</span>seq_id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>            tmp_seq <span class="token operator">=</span> raw_fas<span class="token punctuation">[</span>seq_id<span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 输出反向互补链</span>            tmp_seq <span class="token operator">=</span> reverse_complement<span class="token punctuation">(</span>raw_fas<span class="token punctuation">[</span>seq_id<span class="token punctuation">]</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ouf_w<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">">"</span><span class="token operator">+</span>info_tab<span class="token punctuation">[</span>seq_id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\n"</span> <span class="token operator">+</span> tmp_seq<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>                ouf_w<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 直接运行python pair_chr.py ..&#x2F;nextDevono.fa info.tab gaisen.fa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-SYRI鉴定SV并可视化"><a href="#2-SYRI鉴定SV并可视化" class="headerlink" title="2.SYRI鉴定SV并可视化"></a>2.SYRI鉴定SV并可视化</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># nucmer比对nucmer -c 100 -l 50 -t 8 -p Z7.gaisen Z7.fa gaisen.fa# 比对结果过滤delta-filter -m -i 90 -l 100 Z7.gaisen.delta &gt; Z7.gaisen.filtered.delta# 比对格式转换show-coords -THrd Z7.gaisen.filtered.delta &gt; Z7.gaisen.filtered.coords# SYRI鉴定基因组变异python3 &#x2F;data&#x2F;chaofan&#x2F;software&#x2F;miniconda&#x2F;envs&#x2F;syri_env&#x2F;bin&#x2F;syri -s &#x2F;data&#x2F;chaofan&#x2F;software&#x2F;miniconda&#x2F;envs&#x2F;syri_env&#x2F;bin&#x2F;show-snps -c Z7.gaisen.filtered.coords -d Z7.gaisen.filtered.delta -r Z7.fa -q gaisen.fa --prefix Z7.gaisen.# 生成基因组信息文件，tab分隔(详细内容见代码框下)vi genome.txt# plotsr可视化 -H：输出图形高 -W： 输出图形高plotsr \    --sr Z7.gaisen.syri.out \    --genomes genome.txt -o genome.pdf -b pdf -H 16 -W 12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>genome.txt</code>文件内容：</p><pre class="line-numbers language-txt" data-language="txt"><div class="caption"><span>genome.txt</span></div><code class="language-txt">#filenametagsZ7.faZ7lw:2gaisen.faGaisenlw:2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><a href="https://imgse.com/i/piL4hZt"><img src="https://s11.ax1x.com/2023/12/29/piL4hZt.png" alt="piL4hZt.png"></a></p><p>&emsp;&emsp;嗯，结果看着还行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用SYRI鉴定基因组变异及可视化&quot;&gt;&lt;a href=&quot;#使用SYRI鉴定基因组变异及可视化&quot; class=&quot;headerlink&quot; title=&quot;使用SYRI鉴定基因组变异及可视化&quot;&gt;&lt;/a&gt;使用SYRI鉴定基因组变异及可视化&lt;/h1&gt;&lt;h3 id=&quot;1-调整两</summary>
      
    
    
    
    
    <category term="Genome" scheme="https://zhangchaofan01.gitee.io/tags/Genome/"/>
    
    <category term="linux" scheme="https://zhangchaofan01.gitee.io/tags/linux/"/>
    
    <category term="Python" scheme="https://zhangchaofan01.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ncRNA-annotation</title>
    <link href="https://zhangchaofan01.gitee.io/2023/10/02/ncrna-annotation/"/>
    <id>https://zhangchaofan01.gitee.io/2023/10/02/ncrna-annotation/</id>
    <published>2023-10-02T08:03:11.000Z</published>
    <updated>2023-10-02T12:10:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-conda-环境配置"><a href="#1-conda-环境配置" class="headerlink" title="1.conda 环境配置"></a>1.conda 环境配置</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># conda envconda create -n ncRNAconda activate ncRNA# download infernalconda install -c bioconda infernal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-注释-DB-配置"><a href="#2-注释-DB-配置" class="headerlink" title="2.注释 DB 配置"></a>2.注释 DB 配置</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#  download Rfam datacd &#x2F;data&#x2F;chaofan&#x2F;sourcemkdir 04.ncRNA &amp;&amp; cd 04.ncRNAwget ftp:&#x2F;&#x2F;ftp.ebi.ac.uk&#x2F;pub&#x2F;databases&#x2F;Rfam&#x2F;CURRENT&#x2F;Rfam.cm.gzgzip -d Rfam.cm.gzwget ftp:&#x2F;&#x2F;ftp.ebi.ac.uk&#x2F;pub&#x2F;databases&#x2F;Rfam&#x2F;CURRENT&#x2F;Rfam.clanin# cmpress 索引cmpress Rfam.cm# 从https:&#x2F;&#x2F;rfam.org&#x2F;search&#x2F;type下载相应RF-number对应的注释# 地址为: &#x2F;data&#x2F;chaofan&#x2F;source&#x2F;04.ncRNA&#x2F;RF.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-开始注释-ncRNA"><a href="#3-开始注释-ncRNA" class="headerlink" title="3.开始注释 ncRNA"></a>3.开始注释 ncRNA</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 开始注释cd &#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;13.Alternaria_Z7&#x2F;08.gaisen_genome&#x2F;l0cmscan -Z 66 --cut_ga --rfam --nohmmonly --tblout gaisen.asm.primer.tblout  \  --fmt 2 --cpu 40 --clanin &#x2F;data&#x2F;chaofan&#x2F;source&#x2F;04.ncRNA&#x2F;Rfam.clanin \  &#x2F;data&#x2F;chaofan&#x2F;source&#x2F;04.ncRNA&#x2F;Rfam.cm gaisen.asm.primer.fa &gt; gaisen.asm.primer.cmscancd &#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;13.Alternaria_Z7&#x2F;08.gaisen_genome&#x2F;nextDenovocmscan -Z 66 --cut_ga --rfam --nohmmonly --tblout nextDevono.tblout  \  --fmt 2 --cpu 40 --clanin &#x2F;data&#x2F;chaofan&#x2F;source&#x2F;04.ncRNA&#x2F;Rfam.clanin \  &#x2F;data&#x2F;chaofan&#x2F;source&#x2F;04.ncRNA&#x2F;Rfam.cm nextDevono.fa &gt; nextDevono.cmscan# -Z：根据基因组大小来定，基因组大小的2倍，Mb单位，选一个整数# –tblout 指定table格式输出文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-注释结果整理"><a href="#4-注释结果整理" class="headerlink" title="4.注释结果整理"></a>4.注释结果整理</h2><p>保留非重叠区及重叠区最佳 hit(可以不做)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">awk &#39;BEGIN&#123;OFS&#x3D;&quot;\t&quot;;&#125;&#123;if(FNR&#x3D;&#x3D;1) print &quot;target_name\taccession\tquery_name\tquery_start\tquery_end\tstrand\tscore\tEvalue&quot;; if(FNR&gt;2 &amp;&amp; $20!&#x3D;&quot;&#x3D;&quot; &amp;&amp; $0!~&#x2F;^#&#x2F;) print $2,$3,$4,$10,$11,$12,$17,$18; &#125;&#39; nextDevono.tblout &gt; nextDevono.tblout.xls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释结果整理为 gff 格式, 有些具体的细节我按照自己喜欢的格式进行生成，也可以进行调整。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python &#x2F;data&#x2F;chaofan&#x2F;scripts&#x2F;infernal-tblout2gff.py nextDevono.tblout nextDevono.infernal.ncRNA.gff3 &#x2F;data&#x2F;chaofan&#x2F;source&#x2F;04.ncRNA&#x2F;RF.txtpython &#x2F;data&#x2F;chaofan&#x2F;scripts&#x2F;infernal-tblout2gff.py gaisen.asm.primer.tblout gaisen.asm.primer.infernal.ncRNA.gff3 &#x2F;data&#x2F;chaofan&#x2F;source&#x2F;04.ncRNA&#x2F;RF.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-所用脚本"><a href="#5-所用脚本" class="headerlink" title="5.所用脚本"></a>5.所用脚本</h2><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>infernal-tblout2gff.py</span></div><code class="language-python"><span class="token comment">#!/data/chaofan/software/miniconda/bin/python</span><span class="token keyword">from</span> sys <span class="token keyword">import</span> argv<span class="token punctuation">,</span> exit<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Usage: python </span><span class="token interpolation"><span class="token punctuation">&#123;</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string"> [infernal-tblout] [ouf_gff] [RF.txt]"</span></span><span class="token punctuation">)</span>    ouf_lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token string">"Input file not exists!"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token string">"RF-number info not exists!"</span><span class="token punctuation">)</span>    RF_dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"Gene;"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            RF_dic<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token string">";"</span> <span class="token keyword">in</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            RF_dic<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            RF_dic<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        tmp <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> tmp<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        start_end <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        t <span class="token operator">=</span> <span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"cmscan"</span><span class="token punctuation">,</span> RF_dic<span class="token punctuation">[</span>tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start_end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start_end<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \            tmp<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">"Description="</span><span class="token operator">+</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        ouf_lines<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    ouf_lines <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>ouf_lines<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t_dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment"># add_id</span>    <span class="token keyword">for</span> order <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ouf_lines<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> ouf_lines<span class="token punctuation">[</span>order<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> t_dic<span class="token punctuation">:</span>            t_dic<span class="token punctuation">[</span>ouf_lines<span class="token punctuation">[</span>order<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            t_dic<span class="token punctuation">[</span>ouf_lines<span class="token punctuation">[</span>order<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        ouf_lines<span class="token punctuation">[</span>order<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ID="</span><span class="token operator">+</span>ouf_lines<span class="token punctuation">[</span>order<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>t_dic<span class="token punctuation">[</span>ouf_lines<span class="token punctuation">[</span>order<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">+</span>\            <span class="token string">"; "</span><span class="token operator">+</span>ouf_lines<span class="token punctuation">[</span>order<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    ouf_w <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>    ouf_w<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"\t"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>t_l<span class="token punctuation">)</span> <span class="token keyword">for</span> t_l <span class="token keyword">in</span> ouf_lines<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ouf_w<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&ensp;&ensp;&ensp;&ensp;如发现任何问题，恳请联系我纠正。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-conda-环境配置&quot;&gt;&lt;a href=&quot;#1-conda-环境配置&quot; class=&quot;headerlink&quot; title=&quot;1.conda 环境配置&quot;&gt;&lt;/a&gt;1.conda 环境配置&lt;/h2&gt;&lt;pre class=&quot;line-numbers language</summary>
      
    
    
    
    
    <category term="Genome" scheme="https://zhangchaofan01.gitee.io/tags/Genome/"/>
    
    <category term="ncRNA" scheme="https://zhangchaofan01.gitee.io/tags/ncRNA/"/>
    
  </entry>
  
  <entry>
    <title>manual_genome</title>
    <link href="https://zhangchaofan01.gitee.io/2023/08/25/manual-genome/"/>
    <id>https://zhangchaofan01.gitee.io/2023/08/25/manual-genome/</id>
    <published>2023-08-25T03:02:02.000Z</published>
    <updated>2023-08-25T03:35:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h2><p>&ensp;&ensp;&ensp;&ensp;我们在基因组的组装过程中可能需要手动检查的情况，直接对初始的组装结果进行手动矫正，而这个脚本就是用来做这个的。<br>这些都是在原序列的基础上操作的，我检查了几个例子是没问题的，但是用的时候还是要注意隐藏的 BUG。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Usage: python removeDNA_fromBED.py [raw_contig] [dispose.bed] [disposed_contig]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-输入输出"><a href="#2-输入输出" class="headerlink" title="2.输入输出"></a>2.输入输出</h2><p>输入的 bed 文件根据操作的不同，有不同的列数，每个操作都是一行。<br>一共有 4 大类:</p><ul><li>‘D’: Deletion 删除;</li><li>‘RC’: Reverse_Complement 反向互补;</li><li>‘I’: Insertion 插入序列，这个操作行有五列，除 le 和<code>D</code>和<code>RC</code>类似的 4 列外，<br>多了第五列用来存放要插入的序列，而且这一行的第二列和第三列应该是一样的。<br>你是插入一个点，比如在 11 位置插入，就是在前 10 个碱基后插入一段序列。</li><li>‘M’: Move 挪动序列，这个操作行有 7 列: Chr start1 end1 M start2 end2 [+|-]<br>你是移动，就会有两个位置嘛，如果第七列为 + 符号，代表把 start1 到 end1 的序列<br>挪动到 start2 和 end2 的位置，这种情况下 start2 是等于 end2 的。这个操作等价与在<br>start1 到 end 的一个删除和在 start2 的一个插入。 如果第七列为 - 符号，则方向<br>相反，把 start2-end2 的序列插入到 start1(=end1)的位置。</li></ul><p>输入 <code>bed</code> 文件示例：</p><pre class="line-numbers language-none"><code class="language-none">contig1110RCcontig11111IZCF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入 <code>fasta</code>文件：</p><pre class="line-numbers language-none"><code class="language-none">&gt;contig1AAAAAAAAAATTTTTTTTTTCCCCCCCCCCGGGGGGGGGG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">&gt;contig1TTTTTTTTTTZCFTTTTTTTTTTCCCCCCCCCCGGGGGGGGGG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-脚本"><a href="#3-脚本" class="headerlink" title="3.脚本"></a>3.脚本</h2><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>manual_genome.py</span></div><code class="language-python"><span class="token keyword">from</span> sys <span class="token keyword">import</span> argv<span class="token punctuation">,</span> exit<span class="token keyword">def</span> <span class="token function">reverse_complement</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span><span class="token punctuation">:</span>    complement_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">:</span> <span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">:</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">:</span><span class="token string">'N'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token string">'n'</span><span class="token punctuation">&#125;</span>    reverse_complement_sequence <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>complement_dict<span class="token punctuation">[</span>base<span class="token punctuation">]</span> <span class="token keyword">for</span> base <span class="token keyword">in</span> sequence<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> reverse_complement_sequence<span class="token keyword">def</span> <span class="token function">read_fasta_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    fasta_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    current_sequence <span class="token operator">=</span> <span class="token string">""</span>    current_id <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 处理标识符行</span>                <span class="token keyword">if</span> current_id <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                    fasta_dict<span class="token punctuation">[</span>current_id<span class="token punctuation">]</span> <span class="token operator">=</span> current_sequence                current_id <span class="token operator">=</span> line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                current_sequence <span class="token operator">=</span> <span class="token string">""</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 处理序列行</span>                current_sequence <span class="token operator">+=</span> line        <span class="token keyword">if</span> current_id <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            fasta_dict<span class="token punctuation">[</span>current_id<span class="token punctuation">]</span> <span class="token operator">=</span> current_sequence    <span class="token keyword">return</span> fasta_dict<span class="token keyword">def</span> <span class="token function">read_tsv_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> fa_dic<span class="token punctuation">)</span><span class="token punctuation">:</span>    tsv_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> line<span class="token punctuation">:</span>  <span class="token comment"># 跳过空行</span>                columns <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span>                key <span class="token operator">=</span> columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> key <span class="token keyword">not</span> <span class="token keyword">in</span> tsv_dict<span class="token punctuation">:</span>                    tsv_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> columns<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"M"</span><span class="token punctuation">:</span>                    tsv_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>columns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment"># move order</span>                    <span class="token comment"># M = insertion + deletion</span>                    <span class="token keyword">if</span> columns<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>                        tsv_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>columns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        tsv_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>columns<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> \                            fa_dic<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>columns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">(</span>columns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        tsv_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>columns<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        tsv_dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>columns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> \                            fa_dic<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>columns<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">(</span>columns<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#</span>    <span class="token keyword">for</span> ctg <span class="token keyword">in</span> tsv_dict<span class="token punctuation">:</span>        tsv_dict<span class="token punctuation">[</span>ctg<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>tsv_dict<span class="token punctuation">[</span>ctg<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> tsv_dict<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token string">"Usage: python manual_genome.py [raw_contig] [dispose.bed] [disposed_contig]\n\n\n"</span> <span class="token operator">+</span> \            <span class="token string">"Like BED format [1_index]: \nChr\tstart\tEND\tkeyword\nkeyword: 'D': deletion; 'RC' : reverse_complement; "</span> <span class="token operator">+</span> \            <span class="token string">"'M': move seqs from one pos to another pos(in same contig)."</span> <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> \            <span class="token string">"If keyword = 'I', the line with 5 columns: Chr start end I [insertion_seq].\n"</span><span class="token operator">+</span> \            <span class="token string">"If keyword = 'M', the line with 7 columns: Chr start1 end1 M start2 end2 [+|-].\n"</span><span class="token operator">+</span> \            <span class="token string">"If 7thcol in M lines = '+', means move seqs from start1 to start2, else move seqs from start2 to start1\n"</span><span class="token punctuation">)</span>    fa_dic <span class="token operator">=</span> read_fasta_file<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dispose_dic <span class="token operator">=</span> read_tsv_file<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fa_dic<span class="token punctuation">)</span>    ouf_w <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> contig <span class="token keyword">in</span> fa_dic<span class="token punctuation">:</span>        raw_Seq <span class="token operator">=</span> fa_dic<span class="token punctuation">[</span>contig<span class="token punctuation">]</span>        gap_bp <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> items <span class="token keyword">in</span> dispose_dic<span class="token punctuation">[</span>contig<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment"># Deletion</span>            <span class="token keyword">if</span> items<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"D"</span><span class="token punctuation">:</span>                raw_Seq <span class="token operator">=</span> raw_Seq<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>gap_bp<span class="token punctuation">]</span> <span class="token operator">+</span> raw_Seq<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>gap_bp<span class="token punctuation">:</span><span class="token punctuation">]</span>                gap_bp <span class="token operator">+=</span>  <span class="token builtin">int</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">int</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>gap_bp<span class="token punctuation">)</span>            <span class="token comment"># reverse_complement</span>            <span class="token keyword">if</span> items<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"RC"</span><span class="token punctuation">:</span>                raw_Seq <span class="token operator">=</span> raw_Seq<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>gap_bp<span class="token punctuation">]</span> <span class="token operator">+</span> \                    reverse_complement<span class="token punctuation">(</span>raw_Seq<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>gap_bp<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>gap_bp<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> \                    raw_Seq<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>gap_bp<span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> items<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"I"</span><span class="token punctuation">:</span>                raw_Seq <span class="token operator">=</span> raw_Seq<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>gap_bp<span class="token punctuation">]</span> <span class="token operator">+</span> \                    items<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> \                    raw_Seq<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>gap_bp<span class="token punctuation">:</span><span class="token punctuation">]</span>                gap_bp <span class="token operator">-=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ouf_w<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">">"</span><span class="token operator">+</span>contig<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>raw_Seq<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    ouf_w<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&ensp;&ensp;&ensp;&ensp;如发现任何问题，恳请联系我纠正。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-引言&quot;&gt;&lt;a href=&quot;#1-引言&quot; class=&quot;headerlink&quot; title=&quot;1.引言&quot;&gt;&lt;/a&gt;1.引言&lt;/h2&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;我们在基因组的组装过程中可能需要手动检查的情况，直接对初始的组装结果进行手动</summary>
      
    
    
    
    
    <category term="Genome" scheme="https://zhangchaofan01.gitee.io/tags/Genome/"/>
    
    <category term="python" scheme="https://zhangchaofan01.gitee.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Install R-packages from github</title>
    <link href="https://zhangchaofan01.gitee.io/2023/08/14/install-r-packages-from-github/"/>
    <id>https://zhangchaofan01.gitee.io/2023/08/14/install-r-packages-from-github/</id>
    <published>2023-08-14T03:07:58.000Z</published>
    <updated>2023-08-14T03:09:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些常用的从 github 上安装 R 包的方法:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 1. devtoolsinstall.packages(&quot;devtools&quot;, dep&#x3D;TRUE)library(devtools)install_github(&quot;caitiecollins&#x2F;treeWAS&quot;, build_vignettes &#x3D; TRUE)# 2. githubinstalllibrary(githubinstall)install_github(&#39;hadlley&#x2F;dplyr&#39;)# 3. remotesinstall.packages(&#39;remotes&#39;)remotes::install_git(&quot;https:&#x2F;&#x2F;hub.fastgit.xyz&#x2F;yzhlinscau&#x2F;AFEchidna.git&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本人经常用第三种方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一些常用的从 github 上安装 R 包的方法:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-shell&quot; data-language=&quot;shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;# 1. devtools
i</summary>
      
    
    
    
    
    <category term="R" scheme="https://zhangchaofan01.gitee.io/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>fungiMatingType</title>
    <link href="https://zhangchaofan01.gitee.io/2023/07/10/fungimatingtype/"/>
    <id>https://zhangchaofan01.gitee.io/2023/07/10/fungimatingtype/</id>
    <published>2023-07-10T01:05:04.000Z</published>
    <updated>2023-07-20T01:43:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>&emsp;&emsp;在做真菌的一些生信分析中，可能需要真菌的繁殖方式的信息。真菌的繁殖方式主要有两种：<code>同宗配合</code>与<code>异宗配合</code>，自然界中绝大多数的情况下都是<code>异宗配合</code>。控制真菌交配型的基因主要有两种： MAT1-1 和 MAT1-2，<code>异宗配合</code>指的是繁殖时必须需要这两种不同的交配型，<code>同宗配合</code>则没有这个限制<sup><a href="#ref1">1</a></sup>。<br><a href="https://imgse.com/i/pC7tp6O"><img src="https://s1.ax1x.com/2023/07/19/pC7tp6O.jpg" alt="pC7tp6O.jpg"></a></p><h2 id="1-NCBI-下载同源序列"><a href="#1-NCBI-下载同源序列" class="headerlink" title="1.NCBI 下载同源序列"></a>1.NCBI 下载同源序列</h2><p>&emsp;&emsp;通过上面的知识，我们了解到<em>Alternaria</em>属于<em>Dothideomycetes</em>，主要有两种交配型基因<code>MAT 1-1-1</code>与<code>MAT 1-2-1</code>。然后我们使用 NCBI 进行检索，关键字为<code>((Alternaria) AND mating-type) NOT partial</code>,发现搜索结果也主要的分为了<code>MAT 1-1-1</code>与<code>MAT 1-2-1</code>这两种。<br><a href="https://imgse.com/i/pC7tUjU"><img src="https://s1.ax1x.com/2023/07/19/pC7tUjU.png" alt="pC7tUjU.png"></a><br>&emsp;&emsp;我们两种交配型分别挑选 6~7 条 items，然后按顺序点击下图标签，这里第四步可以选择下载 DNA 还是 protein 序列，我们直接选择 DNA 序列。<br><a href="https://imgse.com/i/pC7tDE9"><img src="https://s1.ax1x.com/2023/07/19/pC7tDE9.png" alt="pC7tDE9.png"></a><br>交配型 MAT1-1 与 MAT1-2 的序列差异非常的大，不管是 DNA 还是 protein，你也可以自己试试。</p><h2 id="2-前处理"><a href="#2-前处理" class="headerlink" title="2.前处理"></a>2.前处理</h2><p>&emsp;&emsp;主要使用 blastn 来鉴定，输入数据包括上一步下载的 DNA 序列和组装好的基因组，如果你的物种基因组很小，就几十 Mb，然后你的二代数据用<a href="https://github.com/ablab/spades">SPADEs</a>能组装的非常好。用<a href="https://github.com/ablab/spades">SPADEs</a>怎么组装基因组之前写过，这里就不详细讲了。</p><p>&emsp;&emsp;上一步下载的 fasta 格式的 DNA 序列的 ID 信息有点乱：</p><blockquote><p>&gt;lcl|AB444193.1_cds_BAJ10530.1_1 [gene=MAT1-1-1] [protein=mating type protein MAT1-1-1] [protein_id=BAJ10530.1] [location=join(&lt;1..142,190..&gt;631)] [gbkey=CDS]</p></blockquote><p>最好修改下 ID，方便后续处理，我的话会改成:</p><pre class="line-numbers language-none"><code class="language-none">&gt;ADE44136.1__MAT1-1-1&gt;ADE44135.1__MAT1-1-1&gt;ADE44134.1__MAT1-1-1&gt;ADE44132.1__MAT1-1-1&gt;ADE44131.1__MAT1-1-1&gt;ADE44128.1__MAT1-1-1&gt;ADE44126.1__MAT1-2-1&gt;ADE44125.1__MAT1-2-1&gt;ADE44124.1__MAT1-2-1&gt;ADE44123.1__MAT1-2-1&gt;ADE44120.1__MAT1-2-1&gt;ADE44118.1__MAT1-2-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-交配型的鉴定"><a href="#3-交配型的鉴定" class="headerlink" title="3.交配型的鉴定"></a>3.交配型的鉴定</h2><h3 id="3-1-blast-建库"><a href="#3-1-blast-建库" class="headerlink" title="3.1 blast 建库"></a>3.1 blast 建库</h3><p>&emsp;&emsp;怎么安装 blast 什么的这里也不讲了，自己百度。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">makeblastdb -dbtype nucl -in Alternaria_sp.nr.re.cds -out Alternaria_sp.nr.re.cds<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-blastn-比对"><a href="#3-2-blastn-比对" class="headerlink" title="3.2 blastn 比对"></a>3.2 blastn 比对</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">blastn -query sample1.geno.fa -db Alternaria_sp.nr.re.cds -outfmt 6 -evalue 1e-10 -max_target_seqs 12 -num_threads 10 -out sample1.MAT.blasn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果就两行：</p><blockquote><p>NODE_11_length_1128118_cov_18.265760 ADE44132.1<strong>MAT1-1-1 99.784 925 2 0 698132 699056 1170 246 0.0 1698<br>NODE_11_length_1128118_cov_18.265760 ADE44132.1</strong>MAT1-1-1 99.592 245 1 0 699104 699348 241.99e-125 448</p></blockquote><p>因为我们使用的是 mRNA 剪切过后的 CDS 序列，所以比上的区域有个大的 GAP。这里最好将<code>-max_target_seqs</code>设为你之前从 NCBI 上下载的总序列数，有可能会鉴定到两种交配型的情况，这种很罕见，但有，处理的时候注意。</p><p><strong>References</strong>:</p><p name = "ref1">https://wswxtb.ijournals.cn/html/wswxtbcn/2020/5/tb20051572.htm</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0.前言&quot;&gt;&lt;/a&gt;0.前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在做真菌的一些生信分析中，可能需要真菌的繁殖方式的信息。真菌的繁殖方式主要有两种：&lt;code&gt;同宗配</summary>
      
    
    
    
    
    <category term="Genome" scheme="https://zhangchaofan01.gitee.io/tags/Genome/"/>
    
    <category term="Fungi" scheme="https://zhangchaofan01.gitee.io/tags/Fungi/"/>
    
  </entry>
  
  <entry>
    <title>MSMC2-Tutorial</title>
    <link href="https://zhangchaofan01.gitee.io/2023/06/29/msmc2-tutorial/"/>
    <id>https://zhangchaofan01.gitee.io/2023/06/29/msmc2-tutorial/</id>
    <published>2023-06-29T07:53:21.000Z</published>
    <updated>2023-07-17T07:32:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-环境配置"><a href="#0-环境配置" class="headerlink" title="0. 环境配置"></a>0. 环境配置</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd &#x2F;data&#x2F;chaofan&#x2F;software&#x2F;git clone https:&#x2F;&#x2F;github.com&#x2F;stschiff&#x2F;msmc2.gitcd msmc2# dmdwget http:&#x2F;&#x2F;downloads.dlang.org&#x2F;releases&#x2F;2.x&#x2F;2.094.2&#x2F;dmd.2.094.2.linux.tar.xzxz -d dmd.2.094.2.linux.tar.xz ; tar -xvf dmd.2.094.2.linux.tarecho  &#39;export PATH&#x3D;&quot;&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2&#x2F;dmd2&#x2F;linux&#x2F;bin64:$PATH&quot;&#39; &gt;&gt; ~&#x2F;.bashrcsource ~&#x2F;.bashrc# gslwget http:&#x2F;&#x2F;mirror.rit.edu&#x2F;gnu&#x2F;gsl&#x2F;gsl-2.6.tar.gztar -pzxvf gsl-2.6.tar.gzcd gsl-2.6.&#x2F;configure --prefix&#x3D;&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2&#x2F;gslmakemake installcd ..# make msmc2## 修改原始的SLDIR, 改成你安装的vi Makefile&#39;SLDIR&#x3D;&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2&#x2F;gsl&#x2F;lib&#39;make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如出现错误:</p><blockquote><p>x86_64-conda-linux-gnu/lib/../lib64/libgcc_s.so.1: undefined reference to <code>memcpy@GLIBC_2.14&#39; collect2: error: ld returned 1 exit status Error: linker exited with status 1 make: *** [Makefile:20：build/release/msmc2] error1    退出conda环境再</code>make`</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">conda deactivatemake# 下载配套工具git clone https:&#x2F;&#x2F;github.com&#x2F;stschiff&#x2F;msmc-tools.gitgit clone https:&#x2F;&#x2F;github.com&#x2F;jessicarick&#x2F;msmc2_scripts.git# mask filewget http:&#x2F;&#x2F;lh3lh3.users.sourceforge.net&#x2F;download&#x2F;seqbility-20091110.tar.bz2tar jxfv seqbility-20091110.tar.bz2cd seqbility-20091110makecd ..# 下载测试数据  手动下载&quot;https:&#x2F;&#x2F;share.eva.mpg.de&#x2F;index.php&#x2F;s&#x2F;swpTM4mNK7gG7nw&#x2F;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-测试-MSMC2"><a href="#1-测试-MSMC2" class="headerlink" title="1. 测试 MSMC2"></a>1. 测试 MSMC2</h2><h3 id="1-1-Generating-consensus-sequences-for-each-sample"><a href="#1-1-Generating-consensus-sequences-for-each-sample" class="headerlink" title="1.1 Generating consensus sequences for each sample"></a>1.1 Generating consensus sequences for each sample</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 把网页下载的数据拖到这里cd &#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2 ; mkdir TEST_data ; cd TEST_dataunzip MSMC-tutorial-files.zip ; cd MSMC-tutorial-files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在开始测试，一共 6 个样本。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir -p .&#x2F;CF_TRY&#x2F;consensus_callsMASTERVARDIR&#x3D;.&#x2F;cg_dataOUTDIR&#x3D;.&#x2F;CF_TRY&#x2F;consensus_callsCHR&#x3D;chr1for IND in NA19238 NA19239 NA19240 NA12878 NA12891 NA12892; do    MASTERVAR&#x3D;$(ls $MASTERVARDIR&#x2F;masterVarBeta-$IND-*.tsv.chr1.bz2)    OUT_MASK&#x3D;$OUTDIR&#x2F;$IND.$CHR.mask.bed.gz    OUT_VCF&#x3D;$OUTDIR&#x2F;$IND.$CHR.vcf.gz    &#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2&#x2F;msmc-tools&#x2F;cgCaller.py $CHR $IND $OUT_MASK $MASTERVAR | gzip -c &gt; $OUT_VCFdone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-Combining-samples"><a href="#1-2-Combining-samples" class="headerlink" title="1.2 Combining samples"></a>1.2 Combining samples</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir -p .&#x2F;CF_TRY&#x2F;msmc2_inputINDIR&#x3D;.&#x2F;CF_TRY&#x2F;consensus_callsOUTDIR&#x3D;.&#x2F;CF_TRY&#x2F;msmc2_inputMAPDIR&#x3D;.&#x2F;&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2&#x2F;msmc-tools&#x2F;generate_multihetsep.py --chr 1 \    --mask $INDIR&#x2F;NA12878.chr1.mask.bed.gz --mask $INDIR&#x2F;NA12891.chr1.mask.bed.gz --mask $INDIR&#x2F;NA12892.chr1.mask.bed.gz \    --mask $INDIR&#x2F;NA19240.chr1.mask.bed.gz --mask $INDIR&#x2F;NA19238.chr1.mask.bed.gz --mask $INDIR&#x2F;NA19239.chr1.mask.bed.gz \    --mask $MAPDIR&#x2F;hs37d5_chr1.mask.bed --trio 0,1,2 --trio 3,4,5 \    $INDIR&#x2F;NA12878.chr1.vcf.gz $INDIR&#x2F;NA12891.chr1.vcf.gz $INDIR&#x2F;NA12892.chr1.vcf.gz \    $INDIR&#x2F;NA19240.chr1.vcf.gz $INDIR&#x2F;NA19238.chr1.vcf.gz $INDIR&#x2F;NA19239.chr1.vcf.gz \    &gt; $OUTDIR&#x2F;EUR_AFR.chr1.multihetsep.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-Estimating-the-effective-population-size"><a href="#1-3-Estimating-the-effective-population-size" class="headerlink" title="1.3 Estimating the effective population size"></a>1.3 Estimating the effective population size</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">INPUTDIR&#x3D;.&#x2F;CF_TRY&#x2F;msmc2_inputOUTDIR&#x3D;.&#x2F;CF_TRY&#x2F;msmc2_input&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2&#x2F;build&#x2F;release&#x2F;msmc2 -t 6 -p 1*2+15*1+1*2 -o $OUTDIR&#x2F;EUR.msmc2 -I 0,1,2,3 $INPUTDIR&#x2F;EUR_AFR.chr1.multihetsep.txt&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2&#x2F;build&#x2F;release&#x2F;msmc2 -t 6 -p 1*2+15*1+1*2 -o $OUTDIR&#x2F;AFR.msmc2 -I 4,5,6,7 $INPUTDIR&#x2F;EUR_AFR.chr1.multihetsep.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-结果可视化"><a href="#1-4-结果可视化" class="headerlink" title="1.4 结果可视化"></a>1.4 结果可视化</h3><p>结果是和官方文档一样的，这里只是简单记录下运行步骤和检查<code>msmc2</code>是否安装成功，具体步骤参阅官方文档。</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">mu &lt;- 1.25e-8gen &lt;- 30afrDat&lt;-read.table(&quot;CF_TRY&#x2F;msmc2_input&#x2F;AFR.msmc2.final.txt&quot;, header&#x3D;TRUE)eurDat&lt;-read.table(&quot;CF_TRY&#x2F;msmc2_input&#x2F;EUR.msmc2.final.txt&quot;, header&#x3D;TRUE)plot(afrDat$left_time_boundary&#x2F;mu*gen, (1&#x2F;afrDat$lambda)&#x2F;(2*mu), log&#x3D;&quot;x&quot;,ylim&#x3D;c(0,100000),     type&#x3D;&quot;n&quot;, xlab&#x3D;&quot;Years ago&quot;, ylab&#x3D;&quot;effective population size&quot;)lines(afrDat$left_time_boundary&#x2F;mu*gen, (1&#x2F;afrDat$lambda)&#x2F;(2*mu), type&#x3D;&quot;s&quot;, col&#x3D;&quot;red&quot;)lines(eurDat$left_time_boundary&#x2F;mu*gen, (1&#x2F;eurDat$lambda)&#x2F;(2*mu), type&#x3D;&quot;s&quot;, col&#x3D;&quot;blue&quot;)legend(&quot;topright&quot;,legend&#x3D;c(&quot;African&quot;, &quot;European&quot;), col&#x3D;c(&quot;red&quot;, &quot;blue&quot;), lty&#x3D;c(1,1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2. 实例"></a>2. 实例</h2><h3 id="2-1-Generate-masked-file"><a href="#2-1-Generate-masked-file" class="headerlink" title="2.1 Generate masked-file"></a>2.1 Generate masked-file</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># work dircd &#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;06.daily&#x2F;06.yelu&#x2F;05.add_data&#x2F;02.GATK_pipeline&#x2F;07.population&#x2F;03.clean_sample&#x2F;00.population_structure&#x2F;03.MSMCmkdir TESTcd TEST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 snpable 生成 masked_genome, 主要使用 msmc2_scripts 的脚本<sup><a href="#ref3">3</a></sup>。<br>对原始的<code>run_snpable2.sh</code>文件稍微进行调整。<br>确保已经安装以下软件(且在 PATH 里):</p><ul><li>gcc</li><li>samtools</li><li>bcftools</li><li>vcftools</li><li>bwa</li><li>python</li></ul><pre class="line-numbers language-shell" data-language="shell"><div class="caption"><span>00.make_masked.sh</span></div><code class="language-shell">#!&#x2F;bin&#x2F;shMSMCTOOLS&#x3D;&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2&#x2F;msmc-tools # folder with msmc-tools binariesPATH&#x3D;$PATH:$MSMCTOOLSOUTDIR&#x3D;&#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;06.daily&#x2F;06.yelu&#x2F;05.add_data&#x2F;02.GATK_pipeline&#x2F;07.population&#x2F;03.clean_sample&#x2F;00.population_structure&#x2F;03.MSMC&#x2F;TEST&#x2F;00.Masked_geno # main directory for output files# for msmc_1_call.shGENOME&#x3D;&#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;06.daily&#x2F;06.yelu&#x2F;02.vcf_anno&#x2F;Alternaria_Alternata_Z7_genomic.fna # reference genome fastaprefix&#x3D;Z7_Masked # prefix of genome masksk&#x3D;35scriptdir&#x3D;&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2&#x2F;msmc2_scriptssnpable_script_path&#x3D;&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2&#x2F;seqbility-20091110 # directory with snpable scriptsPATH&#x3D;$PATH:$snpable_script_pathmkdir $&#123;OUTDIR&#125;&#x2F;snpablecd $&#123;OUTDIR&#125;&#x2F;snpableecho &quot;Starting extraction of overlapping $&#123;k&#125;-mer subsequences&quot;splitfa $GENOME $k | split -l 20000000cat x* &gt;&gt; $&#123;prefix&#125;_split.$k# if it can&#39;t find splitfa, try adding seqbility to the path using &#39;PATH&#x3D;$PATH:&#x2F;project&#x2F;WagnerLab&#x2F;jrick&#x2F;msmc_Sept2017&#x2F;snpable&#x2F;scripts&#39;echo &quot;Aligning $&#123;k&#125;-mer reads to the genome with BWA, then converting to sam file&quot;# the genome needs to be indexed prior to this step-- if it has not already been indexed, run:if [ -f &quot;$&#123;GENOME&#125;.bwt&quot; ]; thenecho &quot;$GENOME already indexed&quot;elseecho &quot;indexing $GENOME&quot;bwa index $GENOMEfiecho &quot;aligning reads to genome with BWA and converting to sam&quot;bwa aln -t 8 -R 1000000 -O 3 -E 3 $&#123;GENOME&#125; $&#123;prefix&#125;_split.$&#123;k&#125; &gt; $&#123;prefix&#125;_split.$&#123;k&#125;.saibwa samse -f $&#123;prefix&#125;_split.$&#123;k&#125;.sam $GENOME $&#123;prefix&#125;_split.$&#123;k&#125;.sai $&#123;prefix&#125;_split.$&#123;k&#125;echo &quot;reads aligned, starting to generate rawMask&quot;gen_raw_mask.pl $&#123;prefix&#125;_split.$&#123;k&#125;.sam &gt; $&#123;prefix&#125;_rawMask.$&#123;k&#125;.faecho &quot;raw mask created as $&#123;prefix&#125;_rawMask.35.fa, now generating final mask with stringency r&#x3D;50%&quot;gen_mask -l $&#123;k&#125; -r 0.5 $&#123;prefix&#125;_rawMask.$&#123;k&#125;.fa &gt; $&#123;prefix&#125;_mask.$&#123;k&#125;.50.faecho &quot;all done! final mask saved as $&#123;prefix&#125;_mask.$&#123;k&#125;.50.fa&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功运行后使用<code>makeMappabilityMask.py</code>得到每条染色体最终的 mask 文件。可能是 gzip 的版本不对，我在运行脚本的时候报错，这个时候直接去掉 gzip 的相关操作，最后对结果文件进行 gzip 压缩就行。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 修改makeMappabilityMask.py默认的输入输出vi &#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2&#x2F;msmc-tools&#x2F;makeMappabilityMask.pypython &#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2&#x2F;msmc-tools&#x2F;makeMappabilityMask.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-make-vcf-file-of-each-chr-of-each-sample"><a href="#2-2-make-vcf-file-of-each-chr-of-each-sample" class="headerlink" title="2.2 make vcf-file of each chr of each sample"></a>2.2 make vcf-file of each chr of each sample</h3><p>准备工作：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir 01.vcf_bed# 只保留常染色体less &#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;06.daily&#x2F;06.yelu&#x2F;02.vcf_anno&#x2F;Alternaria_Alternata_Z7_genomic.fna | grep \&gt; | cut -d &#39; &#39; -f 1 | cut -d &#39;&gt;&#39; -f 2 | sort | head -n 10 &gt; Chr.lst<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们这里挑选 8 个样本进行分析。手动生成一个<code>sample.lst</code>，每个样本一行。我们小小的修改下<code>bamCaller.py</code>的内容，让它适用于单倍体。并对结果文件<code>*vcf.gz</code>进行基因型的<code>Double</code>。</p><pre class="line-numbers language-shell" data-language="shell"><div class="caption"><span>bamCaller_sample.sh</span></div><code class="language-shell">sample_ID&#x3D;$1OUD&#x3D;$2if [ -d &quot;$&#123;OUD&#125;&quot; ]; then    echo &quot;&quot;else    mkdir $&#123;OUD&#125;firefs&#x3D;&#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;06.daily&#x2F;06.yelu&#x2F;02.vcf_anno&#x2F;Alternaria_Alternata_Z7_genomic.fnabam_file&#x3D;&#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;06.daily&#x2F;06.yelu&#x2F;05.add_data&#x2F;02.GATK_pipeline&#x2F;01.alignment_bam&#x2F;$&#123;sample_ID&#125;.sorted.marked.bam# 这里我用的是平均测序深度depth&#x3D;30# build index for bamif [ -f &quot;$&#123;bam_file&#125;.bai&quot; ]; thenecho &quot;$bam_file already indexed&quot;elseecho &quot;indexing $bam_file&quot;samtools index $&#123;bam_file&#125;fi# bamCaller.py 只能处理单条染色体[ -e &#x2F;tmp&#x2F;zwy ] || mkfifo &#x2F;tmp&#x2F;zwyexec 3&lt;&gt;&#x2F;tmp&#x2F;zwyrm -rf &#x2F;tmp&#x2F;zwyfor ((i&#x3D;1;i&lt;&#x3D;5;i++))do echo &gt;&amp;3donecat &#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;06.daily&#x2F;06.yelu&#x2F;05.add_data&#x2F;02.GATK_pipeline&#x2F;07.population&#x2F;03.clean_sample&#x2F;00.population_structure&#x2F;03.MSMC&#x2F;TEST&#x2F;Chr.lst | while read chrdoread -u3&#123;    samtools mpileup -q 20 -Q 20 -C 50 -u  -r $&#123;chr&#125; -f $&#123;refs&#125; $&#123;bam_file&#125; | bcftools call -c -V indels --ploidy 1 | &#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2&#x2F;msmc-tools&#x2F;bamCaller.py $&#123;depth&#125; $&#123;OUD&#125;&#x2F;$&#123;sample_ID&#125;.$&#123;chr&#125;.mask.bed.gz | gzip -c &gt; $&#123;OUD&#125;&#x2F;$&#123;sample_ID&#125;.$&#123;chr&#125;.vcf.gz    python &#x2F;data&#x2F;chaofan&#x2F;projects&#x2F;06.daily&#x2F;06.yelu&#x2F;05.add_data&#x2F;02.GATK_pipeline&#x2F;07.population&#x2F;03.clean_sample&#x2F;00.population_structure&#x2F;03.MSMC&#x2F;TEST&#x2F;00.double_haploid_vcf.py $&#123;OUD&#125;&#x2F;$&#123;sample_ID&#125;.$&#123;chr&#125;.vcf.gz | bgzip -c &gt; $&#123;OUD&#125;&#x2F;$&#123;sample_ID&#125;.$&#123;chr&#125;.d.vcf.gz echo &gt;&amp;3&#125;&amp;donewait<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-Combining-samples"><a href="#2-3-Combining-samples" class="headerlink" title="2.3 Combining samples"></a>2.3 Combining samples</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># mkdir 02.merge_resINDIR&#x3D;.&#x2F;01.vcf_bedOUTDIR&#x3D;.&#x2F;02.merge_resMAPDIR&#x3D;.&#x2F;01.vcf_bedcat Chr.lst | while read Chrdo&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2&#x2F;msmc-tools&#x2F;generate_multihetsep.py --chr $&#123;Chr&#125; \    --mask $INDIR&#x2F;CCA047.$&#123;Chr&#125;.mask.bed.gz --mask $INDIR&#x2F;CCA133.$&#123;Chr&#125;.mask.bed.gz --mask $INDIR&#x2F;CCA205.$&#123;Chr&#125;.mask.bed.gz \    --mask $INDIR&#x2F;CCA206.$&#123;Chr&#125;.mask.bed.gz --mask $INDIR&#x2F;CCA210.$&#123;Chr&#125;.mask.bed.gz --mask $INDIR&#x2F;CCA215.$&#123;Chr&#125;.mask.bed.gz \    --mask $INDIR&#x2F;CCA298.$&#123;Chr&#125;.mask.bed.gz --mask $INDIR&#x2F;CCA560.$&#123;Chr&#125;.mask.bed.gz --mask 00.Masked_geno&#x2F;Z7_$&#123;Chr&#125;.mask.bed.gz \    &#96;ls $&#123;MAPDIR&#125;&#x2F;*.$&#123;Chr&#125;.d.vcf.gz&#96; &gt; $OUTDIR&#x2F;Clade3.$&#123;Chr&#125;.multihetsep.txt &amp;done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-running-MSMC2"><a href="#2-4-running-MSMC2" class="headerlink" title="2.4 running MSMC2"></a>2.4 running MSMC2</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;msmc2&#x2F;build&#x2F;release&#x2F;msmc2 -t 30 -p 1*2+15*1+1*2 -o 02.merge_res&#x2F;Clade3.msmc2 02.merge_res&#x2F;Clade3.*.multihetsep.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>References</strong>:</p><p name = "ref1">https://blog.csdn.net/weixin_45694863/article/details/126812038</p><p name = "ref2">https://github.com/stschiff/msmc-tools/blob/master/msmc-tutorial/guide.md</p><p name = "ref3">https://github.com/jessicarick/msmc2_scripts/blob/master/run_snpable2.sh</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-环境配置&quot;&gt;&lt;a href=&quot;#0-环境配置&quot; class=&quot;headerlink&quot; title=&quot;0. 环境配置&quot;&gt;&lt;/a&gt;0. 环境配置&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-shell&quot; data-language=</summary>
      
    
    
    
    
    <category term="population genetics" scheme="https://zhangchaofan01.gitee.io/tags/population-genetics/"/>
    
  </entry>
  
  <entry>
    <title>Genomic Evolutionary Rate Profiling(GERP)</title>
    <link href="https://zhangchaofan01.gitee.io/2023/06/11/genomic-evolutionary-rate-profiling-gerp/"/>
    <id>https://zhangchaofan01.gitee.io/2023/06/11/genomic-evolutionary-rate-profiling-gerp/</id>
    <published>2023-06-11T08:00:16.000Z</published>
    <updated>2023-06-19T00:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>用来简单记录下GERP的过程，方便后续再次使用。</p><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 下载cactus## 一般在自己本地的soft文件夹下进行wget https:&#x2F;&#x2F;github.com&#x2F;ComparativeGenomicsToolkit&#x2F;cactus&#x2F;releases&#x2F;download&#x2F;v2.5.2&#x2F;cactus-bin-v2.5.2.tar.gztar -xzf cactus-bin-v2.5.2.tar.gzcd cactus-bin-v2.5.2.tar.gzvirtualenv -p python3 cactus_envecho &quot;export PATH&#x3D;$(pwd)&#x2F;bin:\$PATH&quot; &gt;&gt; cactus_env&#x2F;bin&#x2F;activateecho &quot;export PYTHONPATH&#x3D;$(pwd)&#x2F;lib:\$PYTHONPATH&quot; &gt;&gt; cactus_env&#x2F;bin&#x2F;activatesource cactus_env&#x2F;bin&#x2F;activatepython3 -m pip install -U setuptools pippython3 -m pip install -U .python3 -m pip install -U -r .&#x2F;toil-requirement.txtcd bin &amp;&amp; for i in wigToBigWig faToTwoBit bedToBigBed bigBedToBed axtChain pslPosTarget bedSort hgGcPercent mafToBigMaf hgLoadMafSummary; do wget -q http:&#x2F;&#x2F;hgdownload.cse.ucsc.edu&#x2F;admin&#x2F;exe&#x2F;linux.x86_64&#x2F;$&#123;i&#125;; chmod +x $&#123;i&#125;; done## 按照上面的流程下载 cactus一般是不太会有其他问题的# 下载 mashtreegit clone https:&#x2F;&#x2F;github.com&#x2F;lskatz&#x2F;mashtree.git# 下载UCSC工具包## 把这个页面http:&#x2F;&#x2F;hgdownload.cse.ucsc.edu&#x2F;admin&#x2F;exe&#x2F;linux.x86_64&#x2F;上所有的文件下下来，后面有些要用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-获得物种树"><a href="#2-获得物种树" class="headerlink" title="2. 获得物种树"></a>2. 获得物种树</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mashtree --mindepth 0 --numcpus 12 *.fa &gt; mashtree.dnd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-全基因组比对"><a href="#3-全基因组比对" class="headerlink" title="3. 全基因组比对"></a>3. 全基因组比对</h3><p>这个主要使用<a href="https://github.com/ComparativeGenomicsToolkit/cactus/blob/master/doc/progressive.md">Progressive Cactus</a>做。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 构建 cactus的输入文件## species.cacuts.txt第一行则为上一步构建的mashtree。## 后面的行分为两列，用空格隔开，第一列为基因组名称(可以是物种名或自己取的名字)## 第二列则基因组序列地址(基因组序列必须是softmasked的) cactus .&#x2F;js species.cacuts.txt species.hal# hal2maf## refname则是你选择的一个参考基因组，名称必须与 species.cacuts.txt 内的一致$refname&#x3D;&quot;refname&quot;cactus-hal2maf .&#x2F;js species.hal species.maf.gz --refGenome $refname --chunkSize 1000000 --noAncestors --dupeMode single# 可以过滤一下，我们这里是cactus的结果，先不过滤## filter mafs so all blocks have refs and are at least 20 bp longgzip -d species.maf.gzmafFilter -minCol&#x3D;20 -needComp&#x3D;&quot;$refname&quot; species.maf &gt; species.filter.maf## maf文件格式: https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;963e3c5dcc80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-获得MSA-全基因组范围-文件"><a href="#3-1-获得MSA-全基因组范围-文件" class="headerlink" title="3.1 获得MSA(全基因组范围)文件"></a>3.1 获得MSA(全基因组范围)文件</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 生成一个空的dummy.bed文件touch dummy.bed # 将maf文件按染色体拆分mafSplit -byTarget dummy.bed .&#x2F; species.maf -useFullSequenceNamepython maf2fasta.mutil.py -i $each_chr_maf --order species.order -r refs.genome.fa -o $ouf_prefix -c cup_nums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-提取4DTV位点"><a href="#3-2-提取4DTV位点" class="headerlink" title="3.2 提取4DTV位点"></a>3.2 提取4DTV位点</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 提取refs 4DTV位点iTools Gfftools getCdsPep -Ref ref.genome.fa -Gff ref.gff -OutPut ouf_name -4DSite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里我们有两种处理顺序，一种是利用上面的whole genome alignment[maf -&gt; fasta])，再根据这个比对结果提取4DTV位点(如果MSA文件是非必须的，推荐第二种方法)。 另外一种更为直接，直接从maf结果中提取4DTV位点序列。<br>我们直接用后面的方法。脚本写了一上午，检查了一下午，就不放出来了(也可以使用玉米NAM群体<sup><a href="#ref3">3</a></sup>的R脚本)。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gzip -d ouf_name.4Dsite.gz# maf24DTV 这里生成各染色体文件.&#x2F;maf24DTV.py -i species.maf --order species.order -s ouf_name.4Dsite -o ouf_prefix -r ref.genome.fa# 将上一步提取各染色体的4DTV位点合并到一起.&#x2F;fasta_merge_chr.py -i ouf_prefix* -o species.merge.4DTV.fa# 构建中性进化树iqtree -s species.merge.4DTV.fa -st DNA -T 60 -mem 200G  -bb 1000 --prefix species.merge.4DTV.fa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-计算GERP数值"><a href="#4-计算GERP数值" class="headerlink" title="4. 计算GERP数值"></a>4. 计算GERP数值</h3><p>GERP的范围和你进化树的枝长与比较的物种数量都是有关系的，注意。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 这里msa的header和 $&#123;REF&#125;都要和系统发育树中的ID 对应，这里我分染色体跑gerpcol -t species.merge.4DTV.fa.treefile -f $&#123;msa_fasta&#125; -a -e $&#123;REF&#125; -j -v -z -x .gerp.ratesgerpelem -f $&#123;msa_fasta&#125;.gerp.rates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>References</strong>:</p><p name = "ref1">https://doi.org/10.1016/j.cell.2023.04.008</p><p name = "ref2">https://github.com/ComparativeGenomicsToolkit/cactus</p><p name = "ref3">https://github.com/HuffordLab/NAM-genomes/tree/master/gerp</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用来简单记录下GERP的过程，方便后续再次使用。&lt;/p&gt;
&lt;h3 id=&quot;1-环境准备&quot;&gt;&lt;a href=&quot;#1-环境准备&quot; class=&quot;headerlink&quot; title=&quot;1. 环境准备&quot;&gt;&lt;/a&gt;1. 环境准备&lt;/h3&gt;&lt;pre class=&quot;line-number</summary>
      
    
    
    
    
    <category term="Genome" scheme="https://zhangchaofan01.gitee.io/tags/Genome/"/>
    
  </entry>
  
  <entry>
    <title>population_items</title>
    <link href="https://zhangchaofan01.gitee.io/2023/05/24/population-items/"/>
    <id>https://zhangchaofan01.gitee.io/2023/05/24/population-items/</id>
    <published>2023-05-24T11:13:27.000Z</published>
    <updated>2023-06-09T11:32:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="群体遗传学概念"><a href="#群体遗传学概念" class="headerlink" title="群体遗传学概念"></a>群体遗传学概念</h1><p>我的记忆力实在是太差了(金鱼?.?)，为了更深一步的巩固自己的记忆，加深一些概念的理解，固有此。<br><font color="red">本人能力有限，如理解有问题恳请及时纠正！</font></p><h3 id="1-π-pi-核苷酸多样性"><a href="#1-π-pi-核苷酸多样性" class="headerlink" title="1. π (pi) 核苷酸多样性"></a>1. π (pi) 核苷酸多样性</h3><p>用来衡量核苷酸多样性的大小，越大，说明群体多样性越高。目前主要有两种计算π的方法(只考虑biallelic sites： 群体在这个位点只存在两种核苷酸)：</p><p>1.分离位点(群体在这个位点存在&gt;=两个核苷酸)的位点杂合度之和：</p><blockquote><p>$$ π = \sum_{1}^Sh_j  $$<br>其中S为分离位点的个数，而$h_j$则是不同位点杂合度:<br>$$ h_j = \frac{n}{n-1}(1-\sum p^2_i)$$<br>$p_i$指的是不同核苷酸出现概率，二等分位点只存在两种情况。n指的样本数量。</p></blockquote><p>2.任意两条序列之间核苷酸差异的平均位点数:</p><blockquote><p>$$ π = \frac {\sum_{i&lt;k}k_{ij}}{n(n-1)/2}</p></blockquote><p>光看公式没什么感觉，手动算一下吧： </p><p><a href="https://imgse.com/i/p97TxXR"><img src="https://s1.ax1x.com/2023/05/24/p97TxXR.png" alt="p97TxXR.png"></a> </p><p>假设这里包含四个样本，一共15个位点的比对结果。</p><p>如果用<strong>第一种方法</strong>的话，这15个位点中包含6个分离位点： 2 5 8 11 13 15。由$h_j$的计算公式得：<br>$$<br>    π =  h_2 + h_5 + h_8 + h_{11} + h_{13} + h_{15}<br>    \ = \frac {4}{3}(1-\frac{1}{4}^2 - \frac{3}{4}^2) + \frac {4}{3}(1-\frac{1}{2}^2 - \frac{1}{2}^2) + \frac {4}{3}(1-\frac{1}{4}^2 - \frac{3}{4}^2)+  \frac {4}{3}(1-\frac{1}{2}^2 - \frac{1}{2}^2) + \frac {4}{3}(1-\frac{1}{4}^2 - \frac{3}{4}^2) + \frac {4}{3}(1-\frac{1}{4}^2 - \frac{3}{4}^2) \ =0.5 + 0.667 + 0.5 + 0.667 + 0.5 + 0.5 \ = 3.33<br>$$</p><p>如果用<strong>第二种方法</strong>，我们这里一共有4个样本(4条序列)，从这4条序列中抽取2条序列，一共有$C^2_4=6$种情况，这种情况下,这两种方法的π是一致的。<br>$$<br>    π = (3 + 4 + 3 + 5 + 0 + 5) / 6 = 3.33<br>$$<br>在一般的分析中，我们通常算的是每一个窗口(通常5kbp、10kbp和50kbp)的平均π值，所以这里的每核苷酸$π=\frac {3.33}{15}=0.222$。在全基因水平上，通常使用第一种方法计算，第二种方法太耗时($C^2_n*w$ n:样本数 $w$:位点数目)。</p><p>References:</p><blockquote><p>Tajima F. Statistical analysis of DNA polymorphism. Jpn J Genet. 1993 Dec;68(6):567-95. doi: 10.1266/jjg.68.567. PMID: 8031577.</p></blockquote><h3 id="2-搭便车效应-Hitchhiking-Effect"><a href="#2-搭便车效应-Hitchhiking-Effect" class="headerlink" title="2. 搭便车效应(Hitchhiking Effect)"></a>2. 搭便车效应(Hitchhiking Effect)</h3><p>一个有利突变在正向选择的作用下会迅速增加其在群体内的频率，同时因为连锁不平衡，会导致离他物理位置很近的一些基因型的频率也提高了。<br>这会造成所谓的”选择扫荡”，这里简单的考虑两种情况：Hard sweeps和Soft sweeps。</p><ol><li>Hard sweeps:<br>如图A所示，当群体中某个样本突然产生了一个对环境非常有利的突变，因为正向选择作用，这个突变位点+和它连锁的位点在群体内会迅速fixed，形成单一的haplotype。   </li><li>Soft sweeps：如图B所示，可能是由于环境的突然变化，导致群体中已经存在的某个有利基因型被迅速fixed，但因为这个有利基因型已经存在于不同的haplotype block里面了。所以最后这个区域可能只存在具有这个有利基因型的haplotype了(图中2种)。</li></ol><p>选择扫荡会大大降低群体核苷酸的多样性，驯化的人为选择也会导致选择扫荡的产生，我们通过找到这些选择扫荡区域，就有可能找到一些与重要驯化农艺性状相关的基因。<br><a href="https://imgse.com/i/p97L7Jf"><img src="https://s1.ax1x.com/2023/05/24/p97L7Jf.png" alt="p97L7Jf.png"></a></p><h3 id="3-连锁不平衡-Linkage-Disequilibrium"><a href="#3-连锁不平衡-Linkage-Disequilibrium" class="headerlink" title="3. 连锁不平衡(Linkage Disequilibrium)"></a>3. 连锁不平衡(Linkage Disequilibrium)</h3><h3 id="4-重组交换-Recombination"><a href="#4-重组交换-Recombination" class="headerlink" title="4. 重组交换(Recombination)"></a>4. 重组交换(Recombination)</h3><p>References:</p><h3 id="4-ROH-runs-of-homozygosity"><a href="#4-ROH-runs-of-homozygosity" class="headerlink" title="4.ROH (runs of homozygosity)"></a>4.ROH (runs of homozygosity)</h3><h3 id="6-群体分化系数-Fst"><a href="#6-群体分化系数-Fst" class="headerlink" title="6. 群体分化系数(Fst)"></a>6. 群体分化系数(Fst)</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;群体遗传学概念&quot;&gt;&lt;a href=&quot;#群体遗传学概念&quot; class=&quot;headerlink&quot; title=&quot;群体遗传学概念&quot;&gt;&lt;/a&gt;群体遗传学概念&lt;/h1&gt;&lt;p&gt;我的记忆力实在是太差了(金鱼?.?)，为了更深一步的巩固自己的记忆，加深一些概念的理解，固有此。&lt;b</summary>
      
    
    
    
    
    <category term="population genetics" scheme="https://zhangchaofan01.gitee.io/tags/population-genetics/"/>
    
  </entry>
  
  <entry>
    <title>basicMathematicalOperations</title>
    <link href="https://zhangchaofan01.gitee.io/2023/05/18/basicmathematicaloperations/"/>
    <id>https://zhangchaofan01.gitee.io/2023/05/18/basicmathematicaloperations/</id>
    <published>2023-05-18T14:02:43.000Z</published>
    <updated>2023-06-02T13:51:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章-基本数学运算"><a href="#第二章-基本数学运算" class="headerlink" title="第二章 基本数学运算"></a>第二章 基本数学运算</h1><h3 id="第一讲"><a href="#第一讲" class="headerlink" title="第一讲"></a>第一讲</h3><p>简单的介绍了numpy的一些常用的属性和使用matplot绘制曲线图、修改曲线的类型、添加图例lable和更改x|y轴坐标等。<a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html">详细参数说明</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> csvplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.sans-serif"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"SimHei"</span><span class="token punctuation">]</span> <span class="token comment"># 中文</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"axes.unicode_minus"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>q0 <span class="token operator">=</span> <span class="token number">10</span>R <span class="token operator">=</span> <span class="token number">60</span>C <span class="token operator">=</span> <span class="token number">0.00005</span>t <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>linestyle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">"--"</span><span class="token punctuation">,</span> <span class="token string">"-."</span><span class="token punctuation">]</span>qt_Data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> L<span class="token punctuation">,</span>line <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> linestyle<span class="token punctuation">)</span><span class="token punctuation">:</span>    qt <span class="token operator">=</span> q0 <span class="token operator">*</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>R<span class="token operator">*</span>t<span class="token operator">/</span><span class="token number">2</span><span class="token operator">/</span>L<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>L<span class="token operator">/</span>C <span class="token operator">-</span> <span class="token punctuation">(</span>R<span class="token operator">/</span><span class="token number">2</span><span class="token operator">/</span>L<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span>t<span class="token punctuation">)</span>    qt_Data<span class="token punctuation">[</span><span class="token string">"L="</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> qt    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>t<span class="token punctuation">,</span> qt<span class="token punctuation">,</span> ls<span class="token operator">=</span>line<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"L = "</span><span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"电量随时间变化的曲线"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"t/s"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"q(t)"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"qt_data.csv"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> qt_Data<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        writer<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二讲"><a href="#第二讲" class="headerlink" title="第二讲"></a>第二讲</h3><p>这是另外一个类似的例子，绘制概率密度函数，主要是分段函数的写法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"font.sans-serif"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"SimHei"</span><span class="token punctuation">]</span> <span class="token comment"># 中文</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">"axes.unicode_minus"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.04</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.04</span><span class="token punctuation">)</span><span class="token comment"># 根据x和y生成网格点</span><span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>PXY <span class="token operator">=</span> <span class="token number">0.5457</span><span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.75</span><span class="token operator">*</span>Y<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">3.75</span><span class="token operator">*</span>X<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1.5</span><span class="token operator">*</span>X<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>X<span class="token operator">+</span>Y<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> \    <span class="token number">0.7575</span><span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>Y<span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">6</span><span class="token operator">*</span>X<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span> X<span class="token operator">+</span>Y<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>  <span class="token punctuation">(</span>X<span class="token operator">+</span>Y <span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \    <span class="token number">0.5457</span><span class="token operator">*</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.75</span><span class="token operator">*</span>Y<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">3.75</span><span class="token operator">*</span>X<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1.5</span><span class="token operator">*</span>X<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>X<span class="token operator">+</span>Y <span class="token operator">&lt;=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span>projection <span class="token operator">=</span> <span class="token string">"3d"</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot_surface<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> PXY<span class="token punctuation">,</span> cmap<span class="token operator">=</span> <span class="token string">"rainbow"</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"Y"</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_zlabel<span class="token punctuation">(</span><span class="token string">"Z"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第二章-基本数学运算&quot;&gt;&lt;a href=&quot;#第二章-基本数学运算&quot; class=&quot;headerlink&quot; title=&quot;第二章 基本数学运算&quot;&gt;&lt;/a&gt;第二章 基本数学运算&lt;/h1&gt;&lt;h3 id=&quot;第一讲&quot;&gt;&lt;a href=&quot;#第一讲&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="python_advance" scheme="https://zhangchaofan01.gitee.io/tags/python-advance/"/>
    
    <category term="数值分析" scheme="https://zhangchaofan01.gitee.io/tags/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>fungiNanoAssemble</title>
    <link href="https://zhangchaofan01.gitee.io/2023/05/05/funginanoassemble/"/>
    <id>https://zhangchaofan01.gitee.io/2023/05/05/funginanoassemble/</id>
    <published>2023-05-05T08:23:13.000Z</published>
    <updated>2023-05-05T08:37:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是一个交链孢霉属物种三代Nano数据基因组组装注释流程"><a href="#这是一个交链孢霉属物种三代Nano数据基因组组装注释流程" class="headerlink" title="这是一个交链孢霉属物种三代Nano数据基因组组装注释流程"></a>这是一个交链孢霉属物种三代Nano数据基因组组装注释流程</h2><p>这篇博客基于前面那个二代数据组装注释的博客，所以很多细节直接省略了，这里只是简单记录三代Nano数据的组装过程。</p><h3 id="0-环境准备"><a href="#0-环境准备" class="headerlink" title="0.环境准备"></a>0.环境准备</h3><p>环境准备是最头疼的过程。后面再看有没有时间单独讲一下<a href="https://github.com/CompSynBioLab-KoreaUniv/FunGAP">FunGAP</a>的环境配置。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">conda install NanoFilt -c biocondagit clone https:&#x2F;&#x2F;github.com&#x2F;Nextomics&#x2F;NextDenovo.gitpip install paralleltaskcd NextDenovo &amp;&amp; makewget https:&#x2F;&#x2F;github.com&#x2F;broadinstitute&#x2F;pilon&#x2F;releases&#x2F;download&#x2F;v1.24&#x2F;pilon-1.24.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-原始数据的质控"><a href="#1-原始数据的质控" class="headerlink" title="1.原始数据的质控"></a>1.原始数据的质控</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;这是一个交链孢霉属物种三代Nano数据基因组组装注释流程&quot;&gt;&lt;a href=&quot;#这是一个交链孢霉属物种三代Nano数据基因组组装注释流程&quot; class=&quot;headerlink&quot; title=&quot;这是一个交链孢霉属物种三代Nano数据基因组组装注释流程&quot;&gt;&lt;/a&gt;这是</summary>
      
    
    
    
    
    <category term="Genome" scheme="https://zhangchaofan01.gitee.io/tags/Genome/"/>
    
    <category term="Assemble" scheme="https://zhangchaofan01.gitee.io/tags/Assemble/"/>
    
  </entry>
  
  <entry>
    <title>Newton_iterative</title>
    <link href="https://zhangchaofan01.gitee.io/2023/04/15/newton-iterative/"/>
    <id>https://zhangchaofan01.gitee.io/2023/04/15/newton-iterative/</id>
    <published>2023-04-15T02:08:37.000Z</published>
    <updated>2023-04-15T03:33:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0-背景"><a href="#0-背景" class="headerlink" title="0.背景"></a>0.背景</h3><p>惊讶的发现，在过去的一年里，我的python编程技巧几乎没有进步。为了提高编程能力和拥抱AI时代，有必要加强python在真正的数值分析方面的能力，因此开始学习<a href="https://www.bilibili.com/video/BV1uv411s7Wj/">鸣凤老师的课程</a></p><p>第一节课主要讲解了<a href="https://www.zhihu.com/question/20690553">牛顿迭代法求根</a>的python实现，我们这里把实现的代码记录下来，方便后续的复习(本人记忆太差了)。</p><ul><li>函数在整个定义域内最好是二阶可导的</li><li>起始点对求根计算影响重大，可以增加一些别的判断手段进行试错</li></ul><h3 id="1-代码实现"><a href="#1-代码实现" class="headerlink" title="1. 代码实现"></a>1. 代码实现</h3><pre class="line-numbers language-python" data-language="python"><div class="caption"><span>python_advance_0001.py</span></div><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token keyword">from</span> sys <span class="token keyword">import</span> argv<span class="token punctuation">,</span> exit<span class="token keyword">from</span> sympy <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Equation of expression"""</span>    x <span class="token operator">=</span> symbols<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token operator">*</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">*</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>cos<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.25</span><span class="token keyword">def</span> <span class="token function">diff_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""The first derivative"""</span>    <span class="token keyword">return</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>diff<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Newton_iterative</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span> eps<span class="token punctuation">,</span> maxiter<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Newton_iterative"""</span>    x <span class="token operator">=</span> symnols<span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span>    fh <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span>    dfh <span class="token operator">=</span> diff_function<span class="token punctuation">(</span><span class="token punctuation">)</span>    x_n <span class="token operator">=</span> x0    <span class="token comment"># output header</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%5s %25s %25s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"Iter"</span><span class="token punctuation">,</span> <span class="token string">"Approximate_Solution"</span><span class="token punctuation">,</span> <span class="token string">"Error_Rate"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    k <span class="token operator">=</span> <span class="token number">0</span>    errval <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>maxiter<span class="token punctuation">)</span><span class="token punctuation">:</span>        x_b <span class="token operator">=</span> x_n        fx <span class="token operator">=</span> fh<span class="token punctuation">.</span>evalf<span class="token punctuation">(</span>subs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x <span class="token punctuation">:</span> x_b<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        dfx <span class="token operator">=</span> dfh<span class="token punctuation">.</span>evalf<span class="token punctuation">(</span>subs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x <span class="token punctuation">:</span> x_b<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        x_n <span class="token operator">=</span> x_b <span class="token operator">-</span> fx<span class="token operator">/</span>dfx        <span class="token comment"># 这里注意，求根嘛 看当前y值与X轴的差异</span>        errval <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>fh<span class="token punctuation">.</span>evalf<span class="token punctuation">(</span>subs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span> x_n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%5d %25.15f %25.15f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> x_n<span class="token punctuation">,</span> errval<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> errval <span class="token operator">&lt;=</span> eps<span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> k<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;=</span> maxiter<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Under the accuracy:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>eps<span class="token punctuation">&#125;</span></span><span class="token string">, the approximate solution of the equation"</span></span><span class="token operator">+</span>             <span class="token string-interpolation"><span class="token string">f" is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>x_n<span class="token punctuation">&#125;</span></span><span class="token string"> and the error rate is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>errval<span class="token punctuation">&#125;</span></span><span class="token string">."</span></span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The maximum number of iterations is exceeded, convergence may not occur!"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token string">"Usage: python python_advance_0001.py [initial_x] [accuracy_requirement] [iter_count]"</span><span class="token punctuation">)</span>    Newton_iterative<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;0-背景&quot;&gt;&lt;a href=&quot;#0-背景&quot; class=&quot;headerlink&quot; title=&quot;0.背景&quot;&gt;&lt;/a&gt;0.背景&lt;/h3&gt;&lt;p&gt;惊讶的发现，在过去的一年里，我的python编程技巧几乎没有进步。为了提高编程能力和拥抱AI时代，有必要加强python在真</summary>
      
    
    
    
    
    <category term="python_advance" scheme="https://zhangchaofan01.gitee.io/tags/python-advance/"/>
    
    <category term="数值分析" scheme="https://zhangchaofan01.gitee.io/tags/%E6%95%B0%E5%80%BC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>fungiGenomeAssembleAnnotataion</title>
    <link href="https://zhangchaofan01.gitee.io/2023/03/26/fungigenomeassembleannotation/"/>
    <id>https://zhangchaofan01.gitee.io/2023/03/26/fungigenomeassembleannotation/</id>
    <published>2023-03-26T15:25:43.000Z</published>
    <updated>2023-04-24T09:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是一个交链孢霉属物种二代数据基因组组装注释流程"><a href="#这是一个交链孢霉属物种二代数据基因组组装注释流程" class="headerlink" title="这是一个交链孢霉属物种二代数据基因组组装注释流程"></a>这是一个交链孢霉属物种二代数据基因组组装注释流程</h2><h3 id="0-环境准备"><a href="#0-环境准备" class="headerlink" title="0.环境准备"></a>0.环境准备</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">conda create -n genome_assembleconda activate genome_assembleconda install fastqc fastuniq bwa kmergenie jellyfish quast -y -c bioconda# 进入到自己的软件文件夹，没有就新建一个: mkdir softwarecd softwarewget https:&#x2F;&#x2F;ftp-trace.ncbi.nlm.nih.gov&#x2F;sra&#x2F;sdk&#x2F;3.0.2&#x2F;sratoolkit.2.11.1-centos_linux64.tar.gztar -xvzf sratoolkit.2.11.1-centos_linux64.tar.gzwget http:&#x2F;&#x2F;cab.spbu.ru&#x2F;files&#x2F;release3.15.5&#x2F;SPAdes-3.15.5-Linux.tar.gztar -xvzf SPAdes-3.15.5-Linux.tar.gzwget http:&#x2F;&#x2F;www.usadellab.org&#x2F;cms&#x2F;uploads&#x2F;supplementary&#x2F;Trimmomatic&#x2F;Trimmomatic-0.39.zipunzip Trimmomatic-0.39.zip# 下载interproscanwget https:&#x2F;&#x2F;ftp.ebi.ac.uk&#x2F;pub&#x2F;software&#x2F;unix&#x2F;iprscan&#x2F;5&#x2F;5.61-93.0&#x2F;interproscan-5.61-93.0-64-bit.tar.gztar -zxvf interproscan-5.61-93.0-64-bit.tar.gz# 加入环境变量export PATH&#x3D;&quot;&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;sratoolkit.2.11.1-centos_linux64&#x2F;bin:$PATH&quot;export PATH&#x3D;&quot;&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;SPAdes-3.15.5-Linux&#x2F;bin:$PATH&quot;export PATH&#x3D;&quot;&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;interproscan-5.61-93.0:$PATH&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-下载数据"><a href="#1-下载数据" class="headerlink" title="1.下载数据"></a>1.下载数据</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 设置你自己的工作路径，把数据什么的都放在单独的一个工作路径workdir&#x3D;&#x2F;data&#x2F;pipelines&#x2F;01.Gene_anno&#x2F;01.genome_assemble&#x2F;01.Alternaria_spcd $workdirmkdir 00.raw_data &amp;&amp; cd 00.raw_datanohup prefetch SRR16888499 -O .&#x2F; &amp;  # RNA-seqnohup prefetch SRR16914355 -O .&#x2F; &amp;  # WGS(Whole Genome Sequencing)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-质控"><a href="#2-质控" class="headerlink" title="2.质控"></a>2.质控</h3><h4 id="2-1-sra2fastq"><a href="#2-1-sra2fastq" class="headerlink" title="2.1 sra2fastq"></a>2.1 sra2fastq</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">fastq-dump --split-3 SRR16888499&#x2F;SRR16888499.sra &amp;fastq-dump --split-3 SRR16914355&#x2F;SRR16914355.sra &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-2-raw-fastqc"><a href="#2-2-raw-fastqc" class="headerlink" title="2.2 raw_fastqc"></a>2.2 raw_fastqc</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">fastqc  SRR16888499_1.fastq SRR16888499_2.fastq SRR16914355_1.fastq SRR16914355_2.fastq -t 4 -o .&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个是SRR16888499(RNA-seq)的测序质量值和接头报告，我们发现这个质量是非常不错的，但还是使用Trimmomatic对raw_reads进行过滤。<br><a href="https://imgse.com/i/ppCm9te"><img src="https://s1.ax1x.com/2023/02/27/ppCm9te.png" alt="ppCm9te.png"></a><br><a href="https://imgse.com/i/ppCmCfH"><img src="https://s1.ax1x.com/2023/02/27/ppCmCfH.png" alt="ppCmCfH.png"></a><br>SRR16914355的质量也很好，我们按同一标准过滤<br><a href="https://imgse.com/i/ppCmipd"><img src="https://s1.ax1x.com/2023/02/27/ppCmipd.png" alt="ppCmipd.png"></a><br><a href="https://imgse.com/i/ppCmF1A"><img src="https://s1.ax1x.com/2023/02/27/ppCmF1A.png" alt="ppCmF1A.png"></a></p><h4 id="2-3-Trimmomatic-filter"><a href="#2-3-Trimmomatic-filter" class="headerlink" title="2.3 Trimmomatic filter"></a>2.3 Trimmomatic filter</h4><p>注意命令和文件的地址，要换回自己的地址，别傻乎乎的直接用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将不同的测序引物序列合并为一个fasta文件，这样可以处理不同的测序文件cat &#x2F;data&#x2F;chaofan&#x2F;software&#x2F;Trimmomatic-0.39&#x2F;adapters&#x2F;*.fa &gt; &#x2F;data&#x2F;chaofan&#x2F;software&#x2F;Trimmomatic-0.39&#x2F;adapters&#x2F;all.fa# cat完之后检查一下 all.fa 是否是标准的fasta格式，有几个adapter文件末端好像没有换行符，导致cat后 fasta的&gt; + ID的那行接到了上一条序列的序列行了# java -jar &#x2F;data&#x2F;chaofan&#x2F;software&#x2F;Trimmomatic-0.39&#x2F;trimmomatic-0.39.jar PE -phred33 SRR16888499_1.fastq SRR16888499_2.fastq  SRR16888499_1.paired.fastq SRR16888499_1.unpaired.fastq SRR16888499_2.paired.fastq SRR16888499_2.unpaired.fastq ILLUMINACLIP:&#x2F;data&#x2F;pipelines&#x2F;00.RNA_seq&#x2F;Trimmomatic-0.39&#x2F;adapters&#x2F;all.fa:2:30:10:1:TRUE SLIDINGWINDOW:4:20 LEADING:3 TRAILING:3 MINLEN:40 -threads 30# SRR10283202_1.paired.fastq SRR10283202_2.paired.fastq就是我们TRANSCRIPTOMIC的clean data# 这里改下名字，不然后面fungap会找不到(只找固定后缀文件)mv SRR16888499_1.paired.fastq SRR16888499_1.fqmv SRR16888499_2.paired.fastq SRR16888499_2.fqjava -jar &#x2F;data&#x2F;chaofan&#x2F;software&#x2F;Trimmomatic-0.39&#x2F;trimmomatic-0.39.jar PE -phred33 SRR16914355_1.fastq SRR16914355_2.fastq  SRR16914355_1.paired.fastq SRR16914355_1.unpaired.fastq SRR16914355_2.paired.fastq SRR16914355_2.unpaired.fastq ILLUMINACLIP:&#x2F;data&#x2F;pipelines&#x2F;00.RNA_seq&#x2F;Trimmomatic-0.39&#x2F;adapters&#x2F;all.fa:2:30:10:1:TRUE SLIDINGWINDOW:4:20 LEADING:3 TRAILING:3 MINLEN:40 -threads 30# SRR22980490_1.paired.fastq SRR22980490_2.paired.fastq就是我们WGS的clean data,但还要去一下重复序列# 参数的具体含义建议去官网上搜索，这里不详细讲述了，参数选择并不唯一<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-remove-PCR-duplication"><a href="#2-4-remove-PCR-duplication" class="headerlink" title="2.4 remove PCR duplication"></a>2.4 remove PCR duplication</h4><p>在基因组组装前，需要对WGS的测序数据去除PCR重复，这里使用fastuniq操作。虽然raw_data就已经没什么重复序列了，但我们还是去一遍，转录组数据一般不用去除这些重复序列。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir -p ..&#x2F;01.clean_data &amp;&amp; mv *.paired.* ..&#x2F;01.clean_datacd ..&#x2F;01.clean_data # Remove exact duplicatesls SRR16914355_1.paired.fastq SRR16914355_2.paired.fastq &gt; sample_lstfastuniq -i sample_lst -o SRR16914355_1.rd.fastq -p SRR16914355_2.rd.fastq <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-clean-fastqc"><a href="#2-5-clean-fastqc" class="headerlink" title="2.5 clean_fastqc"></a>2.5 clean_fastqc</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">fastqc SRR16914355_1.rd.fastq SRR16914355_2.rd.fastq SRR16888499_1.fq SRR16888499_2.fq -t 4 -o.&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;&emsp;这里就不放图了，不知道上传的是不是就是clean_data，质量很好。</p><h3 id="3-基因组组装"><a href="#3-基因组组装" class="headerlink" title="3.基因组组装"></a>3.基因组组装</h3><h4 id="3-1-genome-survey"><a href="#3-1-genome-survey" class="headerlink" title="3.1 genome survey"></a>3.1 genome survey</h4><p>kmer在生物信息学上有非常广泛的运用，有非常多方法都是基于kmer的，感兴趣的自己去了解下吧。这里主要使用kmergenie来分析。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ls SRR16914355_1.rd.fastq SRR16914355_2.rd.fastq &gt; kmer_lstkmergenie kmer_lst -o kmergenie_result&#x2F;first_kmer -k 127 -l 27 -s 6 -t 40<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>kmergenie log</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">running histogram estimationFile sample_lst starts <span class="token keyword">with</span> character <span class="token string">"S"</span><span class="token punctuation">,</span> hence <span class="token keyword">is</span> interpreted <span class="token keyword">as</span> a <span class="token builtin">list</span> of <span class="token builtin">file</span> namesReading <span class="token number">2</span> read filesLinear estimation<span class="token punctuation">:</span> <span class="token operator">~</span><span class="token number">1910</span> M distinct <span class="token number">74</span><span class="token operator">-</span>mers are <span class="token keyword">in</span> the readsK<span class="token operator">-</span>mer sampling<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">364</span><span class="token operator">|</span> processing  <span class="token operator">|</span><span class="token punctuation">[</span>going to estimate histograms <span class="token keyword">for</span> values of k<span class="token punctuation">:</span> <span class="token number">127</span> <span class="token number">121</span> <span class="token number">115</span> <span class="token number">109</span> <span class="token number">103</span> <span class="token number">97</span> <span class="token number">91</span> <span class="token number">85</span> <span class="token number">79</span> <span class="token number">73</span> <span class="token number">67</span> <span class="token number">61</span> <span class="token number">55</span> <span class="token number">49</span> <span class="token number">43</span> <span class="token number">37</span> <span class="token number">31</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Total time Wallclock  <span class="token number">1924.2</span> sfitting model to histograms to estimate best kestimation of the best k so far<span class="token punctuation">:</span> <span class="token number">109</span>refining estimation around <span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">;</span> <span class="token number">115</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">with</span> a step of <span class="token number">2</span>running histogram estimationFile sample_lst starts <span class="token keyword">with</span> character <span class="token string">"S"</span><span class="token punctuation">,</span> hence <span class="token keyword">is</span> interpreted <span class="token keyword">as</span> a <span class="token builtin">list</span> of <span class="token builtin">file</span> namesReading <span class="token number">2</span> read filesLinear estimation<span class="token punctuation">:</span> <span class="token operator">~</span><span class="token number">2066</span> M distinct <span class="token number">68</span><span class="token operator">-</span>mers are <span class="token keyword">in</span> the readsK<span class="token operator">-</span>mer sampling<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">394</span><span class="token operator">|</span> processing  <span class="token operator">|</span><span class="token punctuation">[</span>going to estimate histograms <span class="token keyword">for</span> values of k<span class="token punctuation">:</span> <span class="token number">115</span> <span class="token number">113</span> <span class="token number">111</span> <span class="token number">109</span> <span class="token number">107</span> <span class="token number">105</span> <span class="token number">103</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Total time Wallclock  <span class="token number">798.288</span> sfitting model to histograms to estimate best ktable of predicted num<span class="token punctuation">.</span> of genomic k<span class="token operator">-</span>mers<span class="token punctuation">:</span> kmergenie_result<span class="token punctuation">.</span>datrecommended coverage cut<span class="token operator">-</span>off <span class="token keyword">for</span> best k<span class="token punctuation">:</span> <span class="token number">1</span>best k<span class="token punctuation">:</span> <span class="token number">111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最佳<strong>K=111</strong>，我们再跑一遍kmergenie，这次缩小下范围</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kmergenie kmer_lst -o kmergenie_result&#x2F;re_kmer -k 115 -l 107 -s 2 -t 40<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这次最佳还是<strong>K=111</strong>，后续我们使用SPAdes组装也要添加这个k值。预估的基因组大约<strong>72,607,905bp</strong>。</p><p><a href="https://imgse.com/i/ppC2ItP"><img src="https://s1.ax1x.com/2023/02/28/ppC2ItP.png" alt="ppC2ItP.png"></a><br>这里是NCBI上公布的基因组序列信息，大小和预估出来的差不太多。<br><a href="https://imgse.com/i/ppfFWgx"><img src="https://s1.ax1x.com/2023/04/02/ppfFWgx.png" alt="ppfFWgx.png"></a></p><h4 id="3-2-SPAdes-assemble"><a href="#3-2-SPAdes-assemble" class="headerlink" title="3.2 SPAdes assemble"></a>3.2 SPAdes assemble</h4><p>主要使用<a href="https://github.com/ablab/spades">spades</a>来进行基因组组装。软件的具体参数还是建议去GitHub上自己看，直接用这个也行。spades要求kmer长度必须为奇数。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nohup &#x2F;data&#x2F;chaofan&#x2F;software&#x2F;SPAdes-3.15.5-Linux&#x2F;bin&#x2F;spades.py -k 21,33,55,77,99,109,111,127 -t 20 --careful --cov-cutoff auto -1 SRR16914355_1.rd.fastq -2 SRR16914355_2.rd.fastq -o ..&#x2F;02.draft_genome &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-3-quast评估基因组组装质量"><a href="#3-3-quast评估基因组组装质量" class="headerlink" title="3.3 quast评估基因组组装质量"></a>3.3 quast评估基因组组装质量</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd ..&#x2F;02.draft_genomeconda activate genome_assemble&#x2F;data&#x2F;chaofan&#x2F;miniconda&#x2F;envs&#x2F;genome_assemble&#x2F;bin&#x2F;quast scaffolds.fastaconda deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个是单纯的二代测序数据的组装结果，N50 126.245kbp。<br><a href="https://imgse.com/i/ppiZUVf"><img src="https://s1.ax1x.com/2023/03/01/ppiZUVf.png" alt="ppiZUVf.png"></a></p><h4 id="3-4-BUSCO评估组装一致性"><a href="#3-4-BUSCO评估组装一致性" class="headerlink" title="3.4 BUSCO评估组装一致性"></a>3.4 BUSCO评估组装一致性</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 单独新建一个环境配置# busco 5.4.4有一个BUG https:&#x2F;&#x2F;gitlab.com&#x2F;ezlab&#x2F;busco&#x2F;-&#x2F;issues&#x2F;627# 很遗憾 busco 5.4.5运行这个DB:dothideomycetes_odb10也会报错(emmm 只有在对基因组使用这个DB评估的时候才有问题,注释蛋白的评估是没问题的) 请安装较老一点版本的busco(5.2.*)。 这里我们直接换一个DB吧 conda create -n busco.5.4.5 -c conda-forge -c bioconda busco&#x3D;5.4.5conda activate busco.5.4.5busco -c 8 -i scaffolds.fasta -l &#x2F;data&#x2F;chaofan&#x2F;source&#x2F;busco_db&#x2F;fungi_odb10 -m geno -o busco.5.4.5_fungi_odb10conda deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://imgse.com/i/ppk19IA"><img src="https://s1.ax1x.com/2023/03/03/ppk19IA.png" alt="ppk19IA.png"></a></p><h3 id="4-基因注释"><a href="#4-基因注释" class="headerlink" title="4.基因注释"></a>4.基因注释</h3><p>基因注释主要使用<a href="https://github.com/CompSynBioLab-KoreaUniv/FunGAP">FunGAP</a>来做，如果不通过docker安装的话，在使用过程中会遇到各种各样的错误，善用google|bing，一般都是可以解决的(<font color=Aqua>这应该是整个过程中最折腾的</font>)。我这里新建了一个conda环境用来基因注释，所以这里我们先切换下环境：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">conda activate fungap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>FunGAP的安装请遵循<a href="https://github.com/CompSynBioLab-KoreaUniv/FunGAP/blob/master/INSTALL.md">Github</a>，这里就不展开讲了</p><p><strong>基因注释主要需要三个输入</strong>:</p><ol><li>组装好的基因组文件;</li><li>近源物种的蛋白序列;</li><li>August预测 物种模型的选择;</li><li>最好测个转录组, FunGAP强制必须加上RNA-seq数据，无论是clean_data还是比对后的bam文件(这个可以修改，但是大部分的脚本文件都需要相应的调整，也可以从NCBI上下载RNA-seq数据)。</li></ol><h4 id="4-1-获取近源物种的蛋白"><a href="#4-1-获取近源物种的蛋白" class="headerlink" title="4.1 获取近源物种的蛋白"></a>4.1 获取近源物种的蛋白</h4><p>FunGAP提供了脚本，可以直接从ncbi下载近源物种的蛋白序列。你可以在你的FunGAP文件夹下面找到<code>download_sister_orgs.py</code>，这里我们通过全局路径调用。如果可以的话，尽量下载同属或者同科的所有蛋白序列。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd $workdirmkdir 03.gene_anno &amp;&amp; cd 03.gene_annopython &#x2F;data&#x2F;pipelines&#x2F;01.Gene_anno&#x2F;00.FunGAP&#x2F;FunGAP&#x2F;download_sister_orgs.py \    --download_dir sister_orgs \    --taxon &quot;Alternaria&quot; \    --num_sisters 4 \    --email_address 2439555626@qq.com zcat sister_orgs&#x2F;*faa.gz &gt; prot_db.faa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>–taxon 物种名或属名 它会通过ncbi的Taxonomy遍历近源物种的Assembly_data去下载已公布基因组的蛋白数据;</li><li>–num_sisters 下载的近源物种的数量,一般来说越多越好;</li><li>–email_address 邮箱地址，随便填.</li></ul><h4 id="4-2-挑选August预测的物种模型"><a href="#4-2-挑选August预测的物种模型" class="headerlink" title="4.2 挑选August预测的物种模型"></a>4.2 挑选August预测的物种模型</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python &#x2F;data&#x2F;pipelines&#x2F;01.Gene_anno&#x2F;00.FunGAP&#x2F;FunGAP&#x2F;get_augustus_species.py \    --genus_name &quot;Alternaria&quot; \    --email_address 2439555626@qq.com # --genus_name 物种名或属名 依然通过ncbi的Taxonomy找到 # 已有的近源物种的augustus模型，可以直接用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Suggestions:We found them in subphylum level: Pezizomycotinaaspergillus_fumigatusaspergillus_nidulansaspergillus_oryzaeaspergillus_terreusbotrytis_cinereachaetomium_globosumcoccidioides_immitisfusarium_graminearumhistoplasma_capsulatummagnaporthe_griseaneurospora_crassa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我就简单的选了第一个直接用了。</p><h4 id="4-3-FunGAP进行基因注释"><a href="#4-3-FunGAP进行基因注释" class="headerlink" title="4.3 FunGAP进行基因注释"></a>4.3 FunGAP进行基因注释</h4><p> emmmmmm，有一个隐藏的问题，<code>maker train</code>的过程中会用到TRF对序列进行处理，<code>TRF</code>应该设置了一个256个字符长度的数组来储存输入文件的全局路径，如果你的输入文件路径大于256，TRF就会<code>buffer overflow detected</code>，老倒霉蛋了。这个问题好像还是第一次发现的，特别是通过mpirun并行maker，会给输入文件加上一堆特殊含义的后缀什么的(这也和我改了maker的默认TMPDIR有关，我把它设置为当前运行路径下，可能当前全局路径本身就很长了)。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;data&#x2F;pipelines&#x2F;01.Gene_anno&#x2F;00.FunGAP&#x2F;FunGAP&#x2F;fungap.py \  --genome_assembly ..&#x2F;02.draft_genome&#x2F;scaffolds.fasta \  --trans_read_1 SRR22973808_1.fastq \  --trans_read_2 SRR22973808_2.fastq \  --augustus_species aspergillus_fumigatus \  --busco_dataset &#x2F;data&#x2F;chaofan&#x2F;source&#x2F;busco_db&#x2F;dothideomycetes_odb10 \  --sister_proteome prot_db.faa \  --num_cores 32 \  --output_dir Alternaria<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-BUSCO评估基因注释结果-这里用的dothideomycetes-odb10"><a href="#4-4-BUSCO评估基因注释结果-这里用的dothideomycetes-odb10" class="headerlink" title="4.4 BUSCO评估基因注释结果(这里用的dothideomycetes_odb10)"></a>4.4 BUSCO评估基因注释结果(这里用的dothideomycetes_odb10)</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 检查使用二代数据组装基因组基因注释的busco值busco -c 8 -i Alternaria&#x2F;fungap_out&#x2F;fungap_out_prot.faa -l &#x2F;data&#x2F;chaofan&#x2F;source&#x2F;busco_db&#x2F;dothideomycetes_odb10 -m prot -o Alternaria_dothideomycetes_odb10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要是植物有这么高就好了。增加prot_db.faa里面同源物种的蛋白数量会适当的提高busco值，可能会加个百分之零点几吧。<br><a href="https://imgse.com/i/ppMRuGV"><img src="https://s1.ax1x.com/2023/03/12/ppMRuGV.png" alt="ppMRuGV.png"></a></p><h4 id="4-5-检查gff文件"><a href="#4-5-检查gff文件" class="headerlink" title="4.5 检查gff文件"></a>4.5 检查gff文件</h4><p>前段时间被gff文件中的CDS phase搞了一波，以后如果我做完基因注释，绝对检查一遍。使用<a href="https://github.com/NAL-i5K/GFF3toolkit">GFF3toolkit</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gff3_QC -g ..&#x2F;03.gene_anno&#x2F;Alternaria&#x2F;fungap_out&#x2F;fungap_out.gff3 -f scaffolds.fasta -o error.txt -s statistic.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们这里可能有一个小问题:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'Line 3'</span><span class="token punctuation">]</span>      Esf0003 Error   <span class="token punctuation">[</span>Strand information missing<span class="token punctuation">:</span> legal chacracter<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">,</span> found at the strand field<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个是由于我们的gff文件中还包含了序列长度信息行，这个可以不用管。假设你的gff确实有别的问题(注意看error.txt)，则用gff3_fix进行矫正，gff3_fix也是属于<code>GFF3toolkit</code>的一个工具</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gff3_fix -qc_r error.txt -g ..&#x2F;03.gene_anno&#x2F;Alternaria&#x2F;fungap_out&#x2F;fungap_out.gff3 -og ..&#x2F;03.gene_anno&#x2F;Alternaria&#x2F;fungap_out&#x2F;corrected.gff3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-6-对注释蛋白进行功能注释"><a href="#4-6-对注释蛋白进行功能注释" class="headerlink" title="4.6 对注释蛋白进行功能注释"></a>4.6 对注释蛋白进行功能注释</h4><p>这里我们使用interproscan.sh来对注释的蛋白进行功能注释，并添加到gff文件中。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 删除序列末尾的 * 号sed -i  &#39;s&#x2F;\*$&#x2F;&#x2F;g&#39; fungap_out_prot.faa&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;interproscan-5.61-93.0&#x2F;interproscan.sh -i fungap_out_prot.faa -f tsv -appl Pfam --goterms -pa --iprlookup -b  Alternaria --tempdir &#x2F;data&#x2F;pipelines&#x2F;01.Gene_anno&#x2F;maker_tmp&#x2F;# 将interproscan注释加到gff文件内&#x2F;data&#x2F;pipelines&#x2F;01.Gene_anno&#x2F;00.FunGAP&#x2F;FunGAP&#x2F;gff3_add_pfam.py --input_gff3 fungap_out.gff3 --pfam_file Alternaria.tsv# 默认注释是加在mRNA 第一个CDS行的第9列(key 列)，你也可以直接修改这个脚本，把他加在mRNA的后面。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如有任何问题，恳请联系我修正。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;这是一个交链孢霉属物种二代数据基因组组装注释流程&quot;&gt;&lt;a href=&quot;#这是一个交链孢霉属物种二代数据基因组组装注释流程&quot; class=&quot;headerlink&quot; title=&quot;这是一个交链孢霉属物种二代数据基因组组装注释流程&quot;&gt;&lt;/a&gt;这是一个交链孢霉属物种二代数</summary>
      
    
    
    
    
    <category term="Genome" scheme="https://zhangchaofan01.gitee.io/tags/Genome/"/>
    
    <category term="Assemble" scheme="https://zhangchaofan01.gitee.io/tags/Assemble/"/>
    
  </entry>
  
  <entry>
    <title>mitogenomeAssembleAnnotataion</title>
    <link href="https://zhangchaofan01.gitee.io/2023/03/26/mitogenomeassembleannotation/"/>
    <id>https://zhangchaofan01.gitee.io/2023/03/26/mitogenomeassembleannotation/</id>
    <published>2023-03-26T15:16:57.000Z</published>
    <updated>2023-03-29T12:38:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="真菌线粒体基因组的组装及注释"><a href="#真菌线粒体基因组的组装及注释" class="headerlink" title="真菌线粒体基因组的组装及注释"></a>真菌线粒体基因组的组装及注释</h1><p>最近在做真菌基因组的组装注释工作，发现之前组装的线粒体基因组有点问题(基因注释只注释出来 rRNA，长度也不太对)，然后重新组装注释一下。主要还是利用<code>NCBI</code>上已有的<code>Alternaria mitochondrion</code>做为参考序列进行组装。<br><a href="https://imgse.com/i/ppsnBSf"><img src="https://s1.ax1x.com/2023/03/26/ppsnBSf.png" alt="ppsnBSf.png"></a></p><h3 id="0-环境的配置"><a href="#0-环境的配置" class="headerlink" title="0.环境的配置"></a>0.环境的配置</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">conda create -n mitogenome sra-tools fastp -y -c biocondaconad activate mitogenome# MITGARD 用来有参拼接线粒体基因组# MITGARD： https:&#x2F;&#x2F;github.com&#x2F;pedronachtigall&#x2F;MITGARDcd &#x2F;data&#x2F;chaofan&#x2F;software&#x2F;git clone https:&#x2F;&#x2F;github.com&#x2F;pedronachtigall&#x2F;MITGARD.gitcd MITGARD&#x2F;bin# 加入PATH 运行过程中需要依赖到一些脚本文件，不放入PATH会报错export PATH&#x3D;&quot;&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;MITGARD&#x2F;bin:$PATH&quot;# MITGARD有好几个软件依赖 不装用不了# 依赖的软件自行配置，都能通过conda安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特别注意，<font color="red"> MITGARD.py、msa2consensus.py、sam2msa.py、RearrangementCheck.py </font>这几个脚本的解释器地址要改成当前环境的python解释器，不然会报错。 把脚本文件的第一行从<code>/usr/bin/python</code> 改成<code>/usr/bin/env python</code>。</p><h3 id="1-数据的下载及预处理"><a href="#1-数据的下载及预处理" class="headerlink" title="1.数据的下载及预处理"></a>1.数据的下载及预处理</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># prefetch 和 fastq-dump都属于sra-tools工具包，直接conda安装就好了prefetch SRR12578435 -O .&#x2F;# 解压sra文件为fastqfastq-dump --split-3 SRR12578435&#x2F;SRR12578435.sra# fastp 去除接头及低质量碱基fastp -i SRR12578435_1.fastq -o SRR12578435_f1.fastq -I SRR12578435_2.fastq -O SRR12578435_r2.fastq --thread&#x3D;4 --length_required&#x3D;40 -j SRR12578435.json# ncbi上线粒体基因组就自己手动下载了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-MITGARD-组装线粒体基因组"><a href="#2-MITGARD-组装线粒体基因组" class="headerlink" title="2.MITGARD 组装线粒体基因组"></a>2.MITGARD 组装线粒体基因组</h3><p>软件运行很简单，前面的注意事项弄完一般就不太会报错了。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;data&#x2F;chaofan&#x2F;software&#x2F;MITGARD&#x2F;bin&#x2F;MITGARD.py -s Z7 -1 SRR12578435_f1.fastq -2 SRR12578435_r2.fastq -R PN2.fa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>Z7_mitogenome.fa</code>就是我们的结果文件了，简单的less查看一下，看看是否有大量的N，有大量N就不行了，可能是你选的参考线粒体基因组不对。</p><h3 id="3-MITOS在线注释线粒体基因组"><a href="#3-MITOS在线注释线粒体基因组" class="headerlink" title="3.MITOS在线注释线粒体基因组"></a>3.MITOS在线注释线粒体基因组</h3><p><a href="http://mitos2.bioinf.uni-leipzig.de/index.py">MITOS</a>的使用非常简单，这里选择真菌，密码子表选择4就好了。速度也非常快，毕竟线粒体基因组才50Kbp长，基因也非常保守。<br><a href="https://imgse.com/i/ppsotk6"><img src="https://s1.ax1x.com/2023/03/27/ppsotk6.png" alt="ppsotk6.png"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;真菌线粒体基因组的组装及注释&quot;&gt;&lt;a href=&quot;#真菌线粒体基因组的组装及注释&quot; class=&quot;headerlink&quot; title=&quot;真菌线粒体基因组的组装及注释&quot;&gt;&lt;/a&gt;真菌线粒体基因组的组装及注释&lt;/h1&gt;&lt;p&gt;最近在做真菌基因组的组装注释工作，发现之前组</summary>
      
    
    
    
    
    <category term="Assemble" scheme="https://zhangchaofan01.gitee.io/tags/Assemble/"/>
    
    <category term="mitogenome" scheme="https://zhangchaofan01.gitee.io/tags/mitogenome/"/>
    
  </entry>
  
  <entry>
    <title>SIFT4G的使用</title>
    <link href="https://zhangchaofan01.gitee.io/2021/12/09/sift4g-de-shi-yong/"/>
    <id>https://zhangchaofan01.gitee.io/2021/12/09/sift4g-de-shi-yong/</id>
    <published>2021-12-09T15:35:14.000Z</published>
    <updated>2021-12-24T15:01:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SIFT4G的安装与使用"><a href="#SIFT4G的安装与使用" class="headerlink" title="SIFT4G的安装与使用"></a>SIFT4G的安装与使用</h1><p>&emsp;&emsp;最近一个月状态有点不太对，有点控制不住自己的情绪。以后要是心情烦躁就写写博客吧！还能巩固知识。</p><p>&emsp;&emsp;<a href="https://github.com/rvaser/sift4g">SIFT4G</a>的前身是<a href="http://blocks.fhcrc.org/sift/SIFT.html">sift</a>，都是同一个东西，用来评估基因突变的有害程度，基于氨基酸序列的同源性和物理性质来预测氨基酸的替换对蛋白质功能是否影响。sift在网站上使用，它提供少量物种的在线查询，包括人类等。而SIFT4G则是本地版，当然windows和linux都有对应的工具可以运行，这里我们只讲述linux上SIFT4G的使用。</p><h2 id="一、SIFT4G的安装"><a href="#一、SIFT4G的安装" class="headerlink" title="一、SIFT4G的安装"></a>一、SIFT4G的安装</h2><h3 id="1-1本地编译安装"><a href="#1-1本地编译安装" class="headerlink" title="1.1本地编译安装"></a>1.1本地编译安装</h3><p>&emsp;&emsp;SIFT4G基于C++，软件编译需要4.9+版本的g++编译器，很不凑巧，我们服务器上只有4.8.5版本的g++编译器。</p><p><a href="https://imgtu.com/i/o4ymtO"><img src="https://s1.ax1x.com/2021/12/09/o4ymtO.png" alt="o4ymtO.png"></a></p><p>&emsp;&emsp;我们可以通过conda安装4.9+以上版本的g++，我们这里选择了5.4.0版本的编译器。如果你是直接通过conda在线安装，建议选一个新的环境，不然可能会有库文件依赖问题（下图所示）。我当时是通过conda本地安装在dcfpy3环境下，现在忘了细节了，不过google肯定能解决问题的。</p><p><a href="https://imgtu.com/i/o4cgl4"><img src="https://s1.ax1x.com/2021/12/10/o4cgl4.png" alt="o4cgl4.png"></a></p><p>&emsp;&emsp;在编译中发现一个问题，不知道安装还是什么其他原因，虽然dcfpy3这个子环境的g++是5.4.0版本。但是我直接编译还是会提示找不到库文件的问题，后来发现直接添加动态链接库可解决。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 这些文件的地址需要按照自己的安装目录去更改，是不能直接套的export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:&#x2F;public&#x2F;home&#x2F;zhangchaofan&#x2F;anaconda3&#x2F;envs&#x2F;dcfpy3&#x2F;lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>&emsp;&emsp;出现下图这个就代表你安装好了，如果还报错可以去作者的github上问问，作者还是挺热情的。</p><p><a href="https://imgtu.com/i/o4gYAx"><img src="https://s1.ax1x.com/2021/12/10/o4gYAx.png" alt="o4gYAx.png"></a></p><h3 id="1-2-conda安装"><a href="#1-2-conda安装" class="headerlink" title="1.2 conda安装"></a>1.2 conda安装</h3><p>&emsp;&emsp;当然，你也可以直接通过conda在线安装，省时省事。(强烈建议新建一个环境来整)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">conda install sift4g -c bioconda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://imgtu.com/i/o4yg4U"><img src="https://s1.ax1x.com/2021/12/10/o4yg4U.png" alt="o4yg4U.png"></a></p><h2 id="二、SIFT4G的使用"><a href="#二、SIFT4G的使用" class="headerlink" title="二、SIFT4G的使用"></a>二、SIFT4G的使用</h2><p>&emsp;&emsp;SIFT4G的使用非常简单，他的输入主要有两个，一个是针对特定物种的数据库，和该物种的蛋白组有关，另外一个则是VCF文件了，这里指的是SNP的，包含indel信息的应该也可以。特定物种的数据库可以去官网下载<a href="https://sift.bii.a-star.edu.sg/sift4g/index.php">SIFT4G</a>下载，然后直接使用<a href="https://github.com/pauline-ng/SIFT4G_Annotator">SIFT4G Annotator</a>进行注释就好了，没有的话就需要自己构建了。我选用的物种刚好没有，所以下面我们开始自己构建小麦的注释数据库。</p><h3 id="2-1-SIFT4G注释数据库的生成"><a href="#2-1-SIFT4G注释数据库的生成" class="headerlink" title="2.1 SIFT4G注释数据库的生成"></a>2.1 SIFT4G注释数据库的生成</h3><p>&emsp;&emsp;软件作者提供生成注释数据库的脚本，当然，你也可以直接联系软件作者帮你弄，需要将提供帮助构建数据库的人加入到你的论文作者中。注释脚本我们直接从<a href="https://github.com/pauline-ng/SIFT4G_Create_Genomic_DB">Github</a>上下载。主要是一个perl脚本，运行起来非常简单，直接用一行shell运行就行了。</p><p>&emsp;&emsp;生成这个注释数据库需要三个东西，包括注释物种的基因组序列fa和对应的gff文件，还需要一个非冗余的蛋白质数据库，你可以使用NCBI的nr蛋白质数据库或者Uniport的nr蛋白数据库。强烈建议构建这个注释数据库的时候拆分为不同的染色体来运行，可以并行化，速度提升非常的大。这个软件在构建过程中有一步需要根据gff和基因组的DNA序列来提取蛋白质，这一步非常非常的卡时间，有一个过程会一直往内存中加东西，但CPU的占用非常低，我之前整整个小麦的，结果运行了两天感觉没啥变化，后来分染色体体运行就非常快了。</p><p>&emsp;&emsp;非冗余数据库下载非常慢，这个文件非常大，下载过程中要注意下载不成功的情况。我们服务器上刚好有师兄弄好的，那我们直接用了。</p><p>&emsp;&emsp;构建注释数据库的命令非常简单，以染色体7D为例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">perl make-SIFT-db-all.pl -config .&#x2F;wheat&#x2F;chr7D.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;&emsp;我们这里讲一下这个./wheat/chr7D.txt配置文件(一个#开头代表原来的注释)：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## 氨基酸编码表格 这里使用标准的 当然也有线粒体什么的可以选</span>GENETIC_CODE_TABLE<span class="token operator">=</span><span class="token number">1</span>GENETIC_CODE_TABLENAME<span class="token operator">=</span>Standard<span class="token comment">## 构建注释数据库的输入文件地址，里面需要包含特定的文件结构</span>PARENT_DIR<span class="token operator">=</span><span class="token punctuation">.</span><span class="token operator">/</span>wheat<span class="token operator">/</span>Chr7DORG<span class="token operator">=</span>wheat<span class="token comment">## 最后输出的结果文件前缀  *.gz *.regions</span>ORG_VERSION<span class="token operator">=</span>chr7D<span class="token comment">#Running SIFT 4G</span><span class="token comment">## sift4g软件的地址path，这里我们已经加入到PATH，不用加全局路径</span>SIFT4G_PATH<span class="token operator">=</span>sift4g<span class="token comment">## 非冗余蛋白库，比对的时候要用</span>PROTEIN_DB<span class="token operator">=</span><span class="token operator">/</span>vol3<span class="token operator">/</span>agis<span class="token operator">/</span>chengshifeng_group<span class="token operator">/</span>zhangchaofan<span class="token operator">/</span><span class="token number">00.</span>wenwen<span class="token operator">/</span><span class="token number">02.</span>database<span class="token operator">/</span>ncbiNR<span class="token operator">/</span>nr<span class="token punctuation">.</span>fa<span class="token comment">## 这里用默认的就好了，不用改</span><span class="token comment"># Sub-directories, don't need to change</span>GENE_DOWNLOAD_DEST<span class="token operator">=</span>gene<span class="token operator">-</span>annotation<span class="token operator">-</span>srcCHR_DOWNLOAD_DEST<span class="token operator">=</span><span class="token builtin">chr</span><span class="token operator">-</span>srcLOGFILE<span class="token operator">=</span>Log<span class="token punctuation">.</span>txtZLOGFILE<span class="token operator">=</span>Log2<span class="token punctuation">.</span>txtFASTA_DIR<span class="token operator">=</span>fastaSUBST_DIR<span class="token operator">=</span>substALIGN_DIR<span class="token operator">=</span>SIFT_alignmentsSIFT_SCORE_DIR<span class="token operator">=</span>SIFT_predictionsSINGLE_REC_BY_CHR_DIR<span class="token operator">=</span>singleRecordsSINGLE_REC_WITH_SIFTSCORE_DIR<span class="token operator">=</span>singleRecords_with_scores<span class="token comment">## 这里用默认的就好了，不用改</span><span class="token comment"># Doesn't need to change</span>FASTA_LOG<span class="token operator">=</span>fasta<span class="token punctuation">.</span>logINVALID_LOG<span class="token operator">=</span>invalid<span class="token punctuation">.</span>logPEPTIDE_LOG<span class="token operator">=</span>peptide<span class="token punctuation">.</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;我们来讲一下PARENT_DIR=./wheat/Chr7D类似的文件结构：</p><p><a href="https://imgtu.com/i/TYrC0P"><img src="https://s4.ax1x.com/2021/12/24/TYrC0P.png" alt="TYrC0P.png"></a></p><p>&emsp;&emsp;你需要在每一个“Chr7D”目录下放两个文件夹，名字应该和上图一样。chr-src放基因组序列，fasta格式，gene-annotation-src下面放对于的gz压缩的gtf文件，好像如果不是gz文件，后面有一步会报错，我也忘了具体的了，gz格式准没错。</p><p>&emsp;&emsp;这些都整好之后我们就可以用之前下载的注释脚本<a href="https://github.com/pauline-ng/SIFT4G_Create_Genomic_DB">Github</a>来构建我们的数据库了。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export LD_LIBRARY_PATH&#x3D;$LD_LIBRARY_PATH:&#x2F;public&#x2F;home&#x2F;zhangchaofan&#x2F;anaconda3&#x2F;envs&#x2F;dcfpy3&#x2F;lib# 这个make-SIFT-db-all.pl 可以放到PATH里，也可以直接上全局路径perl make-SIFT-db-all.pl -config .&#x2F;wheat&#x2F;chr7D.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;拆分为单个染色体后注释的时间很快的，我们成功结束的话目录下应该有下图这些东西。我们最后需要用的文件就在chr7D里面，chr7D.gz和chr7D.regions。</p><p><a href="https://imgtu.com/i/TYyPJS"><img src="https://s4.ax1x.com/2021/12/24/TYyPJS.png" alt="TYyPJS.png"></a></p><h3 id="2-2-给vcf文件注释，获得有害变异"><a href="#2-2-给vcf文件注释，获得有害变异" class="headerlink" title="2.2 给vcf文件注释，获得有害变异"></a>2.2 给vcf文件注释，获得有害变异</h3><p>&emsp;&emsp;我们在构建完我们的注释数据库后，可以直接对vcf文件进行注释了。使用的软件为<a href="https://github.com/pauline-ng/SIFT4G_Annotator">SIFT4G Annotator</a>，这个软件有一个我非常理解不了的东西，为什么这个软件不能直接对gz文件进行操作？还得把原来压缩好的文件解压出来，再注释，再压缩。还有一个，这个软件会强制修改你vcf文件的染色体名称，它会去掉chr*前面的chr字符，比如你开始是chr7D，它后面操作的时候就变成了7D。这个会导致什么呢，这个的设计本来是为了多条染色体的，它会通过这个修改名称后的染色体名字去注释数据库找染色体对应的注释文件。所以上一步获得的chr7D.gz和chr7D.regions得修改成7D.gz和7D.regions才行哦。</p><p>&emsp;&emsp;这个问题我之前问过作者了，他当时也忘了，以为我vcf文件的染色体名称混入了其他的名称。后来我翻他源码才找到了，头疼。第174到177步就是删除染色体名称中“chr”(得是chr开头的哦)的操作代码。</p><p><a href="https://imgtu.com/i/TYcrVI"><img src="https://s4.ax1x.com/2021/12/24/TYcrVI.png" alt="TYcrVI.png"></a></p><p>&emsp;&emsp;在整完前面这些步骤后，我们开始注释了：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">java -jar &#x2F;vol3&#x2F;agis&#x2F;chengshifeng_group&#x2F;zhangchaofan&#x2F;09.SIFT&#x2F;sift4g&#x2F;bin&#x2F;SIFT4G_Annotator.jar -c -i chr7D.vcf -d &#x2F;vol3&#x2F;agis&#x2F;chengshifeng_group&#x2F;zhangchaofan&#x2F;09.SIFT&#x2F;scripts_to_build_SIFT_db&#x2F;wheat&#x2F;Chr7D&#x2F;chr7D -r . -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&emsp;&emsp;我们已经整完了所有的步骤了，-i 待注释的vcf文件， -c 命令行运行模式， -d 之前生成的注释数据库文件夹地址，-r 输出文件地址 -t 提取多个转录本的注释(可选)。下一次更新jcvi的使用，这几天刚好在学习这个，做共线性分析的。</p><p><a href="https://imgtu.com/i/TYTPHS"><img src="https://s4.ax1x.com/2021/12/24/TYTPHS.png" alt="TYTPHS.png"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SIFT4G的安装与使用&quot;&gt;&lt;a href=&quot;#SIFT4G的安装与使用&quot; class=&quot;headerlink&quot; title=&quot;SIFT4G的安装与使用&quot;&gt;&lt;/a&gt;SIFT4G的安装与使用&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近一个月状态有点不太对，有点控制不</summary>
      
    
    
    
    
    <category term="linux" scheme="https://zhangchaofan01.gitee.io/tags/linux/"/>
    
    <category term="SIFT4G" scheme="https://zhangchaofan01.gitee.io/tags/SIFT4G/"/>
    
  </entry>
  
  <entry>
    <title>从FASTA文件中提取特定ID序列</title>
    <link href="https://zhangchaofan01.gitee.io/2021/10/10/cong-fasta-wen-jian-zhong-ti-qu-te-ding-id-xu-lie/"/>
    <id>https://zhangchaofan01.gitee.io/2021/10/10/cong-fasta-wen-jian-zhong-ti-qu-te-ding-id-xu-lie/</id>
    <published>2021-10-10T14:10:03.000Z</published>
    <updated>2024-08-22T11:31:25.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从-FASTA-文件中提取特定-ID-的序列"><a href="#从-FASTA-文件中提取特定-ID-的序列" class="headerlink" title="从 FASTA 文件中提取特定 ID 的序列"></a>从 FASTA 文件中提取特定 ID 的序列</h1><h3 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h3><p>&ensp;&ensp;在日常的工作中，我们经常会遇到：从某个物种总的 cds 序列或者 pep 序列中提取我们感兴趣特定 ID 序列这样的问题。比如我知道某个基因家族所有序列的 ID 名称，现在我想提取这些 ID 的序列，方便下一步的分析。这个时候就可以使用我今天写的东西了。</p><h3 id="二、具体细节"><a href="#二、具体细节" class="headerlink" title="二、具体细节"></a>二、具体细节</h3><p>&ensp;&ensp;下图这是大豆 pep 文件中的一部分，我们看下大概的格式就行了，具体的细节自己找个类似的文件去看下。每条序列由两部分组成，一部分是&gt;开头的一行，包括这条序列的 ID 和相应的描述性东西，另一部分则是由对应的序列组成(DNA 序列或氨基酸序列，这个由你自己的文件的类别决定)。</p><p><a href="https://imgtu.com/i/5E51Yt"><img src="https://z3.ax1x.com/2021/10/10/5E51Yt.png" alt="5E51Yt.png"></a></p><p>&ensp;&ensp;大体的思路是这样的，常规的操作是先读取总的 FASTA 文件，将相应的信息提取出来，然后我们根据待提取的基因 ID 再来操作。在读取总的 FASTA 文件的时候，我们可以根据 FASTA 格式开头的&gt;，来判断是否读取到新的序列。</p><p>&ensp;&ensp;脚本的输入是两个，一个是总的 FASTA 文件，一个是待提取的 ID 列表文件，输出的话就是我们想要 ID</p><p>对应的序列了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! Usage: python get_seq_from_lst.py [fasta_file] [seq_lst] [ouf_file]</span><span class="token keyword">from</span> sys <span class="token keyword">import</span> argv<span class="token keyword">def</span> <span class="token function">read_fa</span><span class="token punctuation">(</span>fa_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp_dic <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fa_file<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'>'</span><span class="token punctuation">:</span>            tmp_dic<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp_dic<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    tmp_dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>t_lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>t_lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> t_lst <span class="token keyword">in</span> tmp_dic<span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> tmp_dic<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    seq_ids <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    fa_dic <span class="token operator">=</span> read_fa<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    ouf_w <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> seq_id <span class="token keyword">in</span> seq_ids<span class="token punctuation">:</span>        <span class="token keyword">if</span> seq_id <span class="token keyword">in</span> fa_dic<span class="token punctuation">:</span>            ouf_w<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token operator">+</span>seq_id<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>fa_dic<span class="token punctuation">[</span>seq_id<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s not in %s file"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>seq_id<span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ouf_w<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&ensp;&ensp;条条大路通罗马，为了实现某一个目的，可以有非常多的方式，特别是 python 和 perl 这些脚本语言。我们可以用不同的数据结构去实现，然而就是使用相同的数据结构，每个人的思考方式也是不同的。最好的代码就是还没写出来的代码！我们这里并没有使用字典这样非常直观的数据结构，只是用了字符串和列表的方式，下面的是使用哈希表实现的 C++代码，C++还没学多久，所以看起来不是很妙。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"># include &lt;iostream&gt;# include &lt;fstream&gt;# include &lt;string&gt;# include &lt;cstdlib&gt;# include &lt;map&gt;using namespace std;int main(int argc, char * argv[])&#123;    if (argc !&#x3D; 4)&#123;        cerr &lt;&lt; &quot;Usage: &quot; &lt;&lt; argv[0] &lt;&lt; &quot; fasta_file[f] gene_lst[l] ouf_[o] \n&quot;;        exit(EXIT_FAILURE);    &#125;    &#x2F;&#x2F; get fa content    ifstream fin;    map&lt;string, string&gt; fa_dict;    fin.open(argv[1]);    string line;    string header;    string seqence;    seqence &#x3D; &quot;&quot;;    while (getline(fin, line))&#123;        if(line[0] &#x3D;&#x3D; &#39;&gt;&#39;)&#123;            if (seqence.length() &gt; 0)&#123;                fa_dict[header] &#x3D; seqence;                seqence &#x3D; &quot;&quot;;            &#125;            header &#x3D; line;        &#125;else&#123;            seqence +&#x3D; line;            seqence +&#x3D; &#39;\n&#39;;        &#125;    &#125;    &#x2F;&#x2F; last one    fa_dict[header] &#x3D; seqence;    fin.clear();    fin.close();    &#x2F;&#x2F; ok    &#x2F;&#x2F; for(auto it : fa_dict)&#123;        &#x2F;&#x2F;     cout &lt;&lt; it.first &lt;&lt;&quot; &quot;&lt;&lt; it.second &lt;&lt;endl;    &#x2F;&#x2F; &#125;    &#x2F;&#x2F; get gene lst    fin.open(argv[2]);    ofstream ouf(argv[3]);    while(getline(fin, line))    &#123;        for(auto it : fa_dict)&#123;            if(it &#x3D;&#x3D; line)&#123;                ouf &lt;&lt; it.first &lt;&lt; &quot;\n&quot; &lt;&lt; it.second;            &#125;        &#125;    &#125;    fin.clear();    fin.close();    ouf.clear();    ouf.close();    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&ensp;&ensp;我现在写的代码，都比较糟糕，并没有运用每种语言的特性，偏面对过程，也就是 c 语言的实现方式。后面要慢慢的转变到面对对象，这才是 C++和 python 比较妙的地方。</p><p>&ensp;&ensp;今天先码到这了，以后更新其他的东西，比如用 biopython 得到更好的实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从-FASTA-文件中提取特定-ID-的序列&quot;&gt;&lt;a href=&quot;#从-FASTA-文件中提取特定-ID-的序列&quot; class=&quot;headerlink&quot; title=&quot;从 FASTA 文件中提取特定 ID 的序列&quot;&gt;&lt;/a&gt;从 FASTA 文件中提取特定 ID 的</summary>
      
    
    
    
    
    <category term="python" scheme="https://zhangchaofan01.gitee.io/tags/python/"/>
    
    <category term="Bioinformatics" scheme="https://zhangchaofan01.gitee.io/tags/Bioinformatics/"/>
    
  </entry>
  
  <entry>
    <title>ROSALIND-多条序列连续公共子串</title>
    <link href="https://zhangchaofan01.gitee.io/2021/03/10/rosalind-duo-tiao-xu-lie-gong-gong-zi-xu-lie/"/>
    <id>https://zhangchaofan01.gitee.io/2021/03/10/rosalind-duo-tiao-xu-lie-gong-gong-zi-xu-lie/</id>
    <published>2021-03-10T14:33:21.000Z</published>
    <updated>2021-09-25T04:04:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多条序列连续公共子串"><a href="#多条序列连续公共子串" class="headerlink" title="多条序列连续公共子串"></a>多条序列连续公共子串</h1><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>&ensp;&ensp;&ensp;这道题是<a href="http://rosalind.info/problems/lcsm/">ROSALIND</a>上的一道题，感觉挺有趣的，就整整。题目放下面了：</p><p><a href="https://imgtu.com/i/6YlHmj"><img src="https://s3.ax1x.com/2021/03/10/6YlHmj.png" alt="6YlHmj.png"></a></p><p>&ensp;&ensp;&ensp;在整这道题之前，先来点预备知识，在寻找多序列的公共子串之前，先了解一下两条序列的最长公共子序列，这个是基础知识。在Leetcode上有这样的一道题：<a href="https://leetcode-cn.com/problems/longest-common-subsequence/">1143. 最长公共子序列</a>，可以先解出一下这道题，再来看我们的这个问题。</p><h3 id="1-1最长公共子序列"><a href="#1-1最长公共子序列" class="headerlink" title="1.1最长公共子序列"></a>1.1最长公共子序列</h3><p>&ensp;&ensp;&ensp;大噶可以先去B站看下别人的解题思路，比如这个<a href="https://www.bilibili.com/video/BV1iE411Y7fy?from=search&seid=3665822260836410502">小姐姐的</a>，题目如下：<a href="https://imgtu.com/i/6YgD9f"><img src="https://s3.ax1x.com/2021/03/11/6YgD9f.png" alt="6YgD9f.png"></a></p><p>&ensp;&ensp;&ensp;大概来说是这样的一个数学表达式：<a href="https://imgtu.com/i/6YWnBQ"><img src="https://s3.ax1x.com/2021/03/11/6YWnBQ.png" alt="6YWnBQ.png"></a></p><p>先放上小姐姐的 java 代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span><span class="token class-name">String</span> text1<span class="token punctuation">,</span> <span class="token class-name">String</span> text2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> text1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> text2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c1 <span class="token operator">=</span> text1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> text2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&ensp;&ensp;&ensp; 在放上对应的 python3 代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> text2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>    m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> text1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> text2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&ensp;&ensp;&ensp;再看一下两种语言的速度差距（所以该学什么语言不用我多说了吧！+ 。+）：</p><p><a href="https://imgtu.com/i/6NkzOx"><img src="https://s3.ax1x.com/2021/03/11/6NkzOx.png" alt="6NkzOx.png"></a></p><h3 id="1-2最长公共子串"><a href="#1-2最长公共子串" class="headerlink" title="1.2最长公共子串"></a>1.2最长公共子串</h3><p>&ensp;&ensp;&ensp;子串和子序列是有差别的，子串指的是字符串中连续的一段字符，而子序列的话是没有这个要求的，其实这两种的解题思路是一样的。子串的数学表达式为：<a href="https://imgtu.com/i/6Yotu6"><img src="https://s3.ax1x.com/2021/03/11/6Yotu6.png" alt="6Yotu6.png"></a></p><p>&ensp;&ensp;在有前面的基础上，我们直接放代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Find_Lcsubstr</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>    m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    max1 <span class="token operator">=</span> <span class="token number">0</span>    state <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> text1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> text2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> max1<span class="token punctuation">:</span>                    max1 <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>                    state <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">return</span> s1<span class="token punctuation">[</span>state<span class="token operator">-</span>max1<span class="token punctuation">:</span>state<span class="token punctuation">]</span><span class="token punctuation">,</span> max1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        &ensp;下面我们尝试寻找两条DNA序列的最长公共子串：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token triple-quoted-string string">""">Rosalind_2556ATGTGAGGGATGTTAGCTTAGTCCGGAGATGCGATGCGGATAGCGTCCAAAGGACATCGTGGGAAGTAACATCTGTGCTGAGTGAGTTCAACATGCAGGAAGCCCTGGTTATAGCCTACAAACGCACGCCTTGTATCTACCGCTCACGGCGTTAGGAGTTTATGACCATGACTGGTCCTCTGGACCTGGCCTGCGTGTGGGGTTCCGTCCGAGCAGAGGATCTTCATCTAGTCCTAATCGCCGACTGCTTAGTCTGATGTTATCGAATGACTTAAACCGCTTTGGGGTTAGGCGGCGTCTACTCATGAGGTACTTACCTTGCTAGGCATGACGTTCTTGATTTAGGCACAGTCGCATTAGTGCCATGGGTTGGGACTAAGATCACTTTCCGTCACATGATAGCACACCTGAACTTTCTAGTCGTAAACCTACTAGAATGGATCACGCCACTCGGCCTCGGGTAAGATCCCAATGCCACTTCCCACTCCTACGAAGCAAGGGTGTACACTCTTTTGCCCTGACATCCGCCCTCTTGCGAACCGCCCGGGGATACTCGCCCCGCCTTCGAGTGGCATGAAGCCAGTTAGATTTACCTGGGTATAAGTGTGTTCTTCGGGGAGCGAGCAGCTTATGAAGGGTCAGGTTGTTCAAAAACCAGGCAGTGGGAGCCACAGGCCACCTGTGCGCTAGAAAAATACCGTGTGCAACAATCTCTATGCGAGACCACTTCTAATTAAAATCGCAAAAGATAACCGTCCGGGATCGGCTGCTGCCTGCGGCGATGTGTGTGCCCCCCATACGATGCTTTCGTATTACATGCTTAAGGAATGACAAGGTGCCCACTGGGTGAAACATTCGTAGTCTCAGCATTTGCGTCGGCTGTTTCTCACTAGGCTGCCAGAAACTGGTACGTGGACAAACTATCCTTTTTTGAGAGGGACACGACTTTACGCCCGGACCCTGCACAGCCGCATGTATCTCCTCCCTTGGGCTATTAGAC>Rosalind_8024ACACATACTCGCTGGCAATGGCTTCTGCTGACACAGATCGCGTTTATTGCCCTGACATCCGCCCTCTTGCGAACCGCCCGGGGATACTCGCCCCGCCTTCGAGTGGCATGAAGCCAGTTAGATTTACCTGGGTATAAGTGTGTTCTTCGGGGAGCGAGCAGCTTATGAAGGGTCAGGTTGTTACAGCGCTCACGTTATATATGTAACGGAATGAACCTTCGTGCGTTCTCACCTCAGATTATAAAGTCCCGTGAACCGGACAATGTGGCCAAAAGTCCTGGGCGTTGCAATGATAGCTCCTCGGCAGTATGCTGAAGGGGAAAAGCTTACCTGTTCTATAGTATCGTACTCAACCGCCGGCCTCAGCGCTTCGTCCAGGGTGCGCCGGGAATCAGTGTCTAAGGGCTCAACTCGCTCATGGAGGTTACGACAACGACTCTGAGGCAATCCCATCGGTTAATGCACAACACCGAGGCGGGGGGGCATGAGTTTGACGATACCCATGTAAGAACAACGTCCGATTGCCCAAGCACCTAGTGGGACTTGGTCTCGCTCCTCCGATAAATAGTACGGCCACTCAATCTTTGGGATCCAGGTCAACGCCTGATCACGGTCCCAGCTGAACGTAGGAGATGGTCGACACTTACGGCTTAATATTACGTTACTTACTATCGGTTGCTAACGTGGACCCCCTATCCCTGAGCCTTTTGGCTCAGTTAAAATAATCCTTGTTACGGTGGGTAACGGCGGTTCATACAACTTCGAGCTCTCGATTCGAGTAGGGCCTGATCTAAAGTGAAATCGACTCGGCATGGGTTGAAACTACCTATAATCAAGTGGCGAATGAAGAGGCAGTTCACATCTGGTGATATTTCAGTTTCATGGGTTCTTAGACGAGGGCGTTCTTATCTTCGCACAGCGCTCCTCCTAGATCATACGTTAGCCCTGGTCTCAGAAACATGGCAAGAAGGCTCCCTCGGACGAGGCGGTCTAATTAAGT"""</span><span class="token keyword">def</span> <span class="token function">Find_Lcsubstr</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>    m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    max1 <span class="token operator">=</span> <span class="token number">0</span>    state <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> max1<span class="token punctuation">:</span>                    max1 <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>                    state <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>                        <span class="token keyword">return</span> s1<span class="token punctuation">[</span>state<span class="token operator">-</span>max1<span class="token punctuation">:</span>state<span class="token punctuation">]</span><span class="token punctuation">,</span> max1<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    seq_lines <span class="token operator">=</span> data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> seq_lines<span class="token punctuation">:</span>        res <span class="token operator">=</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        string_line <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>j <span class="token keyword">for</span> j <span class="token keyword">in</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        seq<span class="token punctuation">.</span>append<span class="token punctuation">(</span>string_line<span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>Find_Lcsubstr<span class="token punctuation">(</span>seq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> seq<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 输出为'TTGCCCTGACATCCGCCCTCTTGCGAACCGCCCGGGGATACTCGCCCCGCCTTCGAGTGGCATGAAGCCAGTTAGATTTACCTGGGTATAAGTGTGTTCTTCGGGGAGCGAGCAGCTTATGAAGGGTCAGGTTGTT', 136</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、多条序列的连续公共子串"><a href="#二、多条序列的连续公共子串" class="headerlink" title="二、多条序列的连续公共子串"></a>二、多条序列的连续公共子串</h2><p>&ensp;&ensp;&ensp;好了，我们已经会两条序列的寻找呢，在进行多条序列的公共子串分析之前，我们应该有这样的一个概念：两条序列的公共最长子串直接一比较就行了，那么如果是多条呢？是不是需要多条序列之间的两两比较呢？那这个该有多复杂呢？</p><p>&ensp;&ensp;&ensp;其实有个简单的想法，那就是先随便的挑出两条出来，把这两条比较一下，因为不知道最后结果序列会有多长，可能你在这两条序列中找到的最长的子串，可能在别的序列中就没有那么长了，所以应该在挑出来比较的两条序列中把一定长度的所有公共子串都拿出来，最后想要的多条序列的最长公共子串一定在前面两条公共子串的子集中，可能是子集，也可能是某一个子集的子串（不知道这里搞明白没有）。</p><p>&ensp;&ensp;&ensp;举个简单的例子：假设啊，假设，你在挑出的两条序列的比较中得到了符合一定长度的两个公共子串:[‘TTGCCCTGACATCCGCCCTCTTGCGAACCGCCCGGGGATACTCGCCCCGCCTT’, ‘CTTCGGGGAGCGAGCAGCTTATGAAGGGTCAGGTTGTT’],然后你用这两条序列去分别的和除这两条序列以外的所有序列比较，运气好可能都是其他DNA序列的子串，这个时候我们就可以选择最长的那条，运气不好的情况下是什么样的呢？假设str1 = ‘TTGCCCTGACATCCGCCCTCTTGCGAACCGCCCGGGGATACTCGCCCCGCCTT’这条子串在和第三条DNA序列比较的时候只有前面20个字符是<strong>公共</strong>且<strong>最长</strong>的，那么我们在这个时候就应该把原来的全长子串，变成它的前二十个字符，str1 = str1[:20]，然后再用这个改变后的str1去和第四条DNA序列去比，如果后面所得长度又发生变化了，再改变str1的值，一直这样迭代下去，这样我们得到的就是所有DNA序列的公共子串了，然后我们把前面两条序列和其他DNA序列都比较一下，会得到一些子串，选出最长的就是我们想要的结果了。</p><p>&ensp;&ensp;&ensp;不多BB，我们直接整这道题：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># N个字符串的所有公共子串长度大于阈值的子串</span><span class="token comment"># 设置阈值</span>MIN_NUM <span class="token operator">=</span> <span class="token number">8</span><span class="token keyword">def</span> <span class="token function">get_maxstr</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">:</span>    total_str <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    lstr1 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>    lstr2 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>    record <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>lstr2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>lstr1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 构建打分矩阵</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>lstr1<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>lstr2<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                record<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token comment"># 遍历打分矩阵，获取相应的子串</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>lstr1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>lstr2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> MIN_NUM <span class="token keyword">and</span> <span class="token operator">+</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">==</span> lstr1 <span class="token keyword">or</span> j <span class="token operator">==</span> lstr2<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>record<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                len1 <span class="token operator">=</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                total_str<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str1<span class="token punctuation">[</span>i<span class="token operator">-</span>len1<span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> total_str    <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f1 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'13.input.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    seq_lines <span class="token operator">=</span> f1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> seq_lines<span class="token punctuation">:</span>        res <span class="token operator">=</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        string_line <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>        seq<span class="token punctuation">.</span>append<span class="token punctuation">(</span>string_line<span class="token punctuation">)</span>        <span class="token comment"># 获取开始两条DNA序列的公共子串 len > MIN_NUM</span>    res_lst <span class="token operator">=</span> getmaxstr<span class="token punctuation">(</span>seq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> seq<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    finall_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 将前面获取的子串分别与其他的DNA序列比对，获取最长子串</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> res_lst<span class="token punctuation">:</span>        state <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>seq_lines<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            one_ouf <span class="token operator">=</span> getmaxstr<span class="token punctuation">(</span>i<span class="token punctuation">,</span> seq_lines<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> one_ouf<span class="token punctuation">:</span>                state <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token keyword">break</span>            <span class="token comment"># 得到最长的子串</span>            Long_return <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>one_ouf<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Long_return<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                i <span class="token operator">=</span> Long_return        <span class="token keyword">if</span> state<span class="token punctuation">:</span>            finall_lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>finall_lst<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>               <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&ensp;&ensp;&ensp;这段代码是年前写的，现在看的话有非常大的提升空间，感兴趣的话可以自己尝试下怎么加快速度！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多条序列连续公共子串&quot;&gt;&lt;a href=&quot;#多条序列连续公共子串&quot; class=&quot;headerlink&quot; title=&quot;多条序列连续公共子串&quot;&gt;&lt;/a&gt;多条序列连续公共子串&lt;/h1&gt;&lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="ROSALIND" scheme="https://zhangchaofan01.gitee.io/tags/ROSALIND/"/>
    
    <category term="LCS" scheme="https://zhangchaofan01.gitee.io/tags/LCS/"/>
    
    <category term="python" scheme="https://zhangchaofan01.gitee.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>bilibili弹幕词云</title>
    <link href="https://zhangchaofan01.gitee.io/2021/01/30/bilibili-dan-mu-ci-yun/"/>
    <id>https://zhangchaofan01.gitee.io/2021/01/30/bilibili-dan-mu-ci-yun/</id>
    <published>2021-01-30T10:54:56.000Z</published>
    <updated>2022-10-05T09:44:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bilibili弹幕词云"><a href="#bilibili弹幕词云" class="headerlink" title="bilibili弹幕词云"></a>bilibili弹幕词云</h1><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>​        1.到B站获取cid</p><p>​        2.根据cid获取弹幕数据</p><p>​        3.用python获得数据</p><p>​        4.数据的清洗</p><p>​        5.生成词云</p><h2 id="一、获取视频的cid"><a href="#一、获取视频的cid" class="headerlink" title="一、获取视频的cid"></a>一、获取视频的cid</h2><p>​        因为一个视频的弹幕是和加载时的heartbeat的XHR的脚本是有关的，获取它的cid名称就行了，浏览器F12打开检测器，点击网络，F5刷新一下就可以了。</p><p><img src="https://i.loli.net/2021/01/30/iq1Jry7pT48SYcZ.png" alt="image-20210130184712846.png"></p><h2 id="二、根据cid获取弹幕数据"><a href="#二、根据cid获取弹幕数据" class="headerlink" title="二、根据cid获取弹幕数据"></a>二、根据cid获取弹幕数据</h2><p>​        如上图所示，目标视频的cid为 264124，目标数据位于：**<em><a href="https://comment.bilibili.com/%E8%A7%86%E9%A2%91%E7%9A%84cid.xml">https://comment.bilibili.com/视频的cid.xml</a>**</em>， <a href="https://comment.bilibili.com/264124.xml">https://comment.bilibili.com/264124.xml</a> 这个页面就是我们cid的数据页面了。</p><p><img src="https://i.loli.net/2021/01/30/3LM8EDJ4bFZNYiI.png" alt="image-20210130155253878.png"></p><h2 id="三、用python获得数据"><a href="#三、用python获得数据" class="headerlink" title="三、用python获得数据"></a>三、用python获得数据</h2><h6 id="1-得到网页文本数据"><a href="#1-得到网页文本数据" class="headerlink" title="1.得到网页文本数据"></a>1.得到网页文本数据</h6><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupget_url <span class="token operator">=</span> <span class="token string">'https://comment.bilibili.com/152116553.xml'</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>get_url<span class="token punctuation">)</span>res<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/01/30/I52te6h3cfNYyFz.png" alt="image-20210130162228368.png"></p><h6 id="2-获得弹幕文本"><a href="#2-获得弹幕文本" class="headerlink" title="2.获得弹幕文本"></a>2.获得弹幕文本</h6><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 可以很明显的发现每一行弹幕都处在网页d标签下</span><span class="token comment"># 直接使用lxml解析</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>total_d <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token comment"># 获取d标签的文本</span>comments <span class="token operator">=</span> <span class="token punctuation">[</span>conmment<span class="token punctuation">.</span>text <span class="token keyword">for</span> conmment <span class="token keyword">in</span> total_d<span class="token punctuation">]</span>comments<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/01/30/VpMO6JYE5w1hB4s.png" alt="image-20210130184827847.png"></p><h1 id="四、数据的清洗"><a href="#四、数据的清洗" class="headerlink" title="四、数据的清洗"></a>四、数据的清洗</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 先把英文转换成大写</span>comments <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> comments<span class="token punctuation">]</span><span class="token comment"># 去掉空格</span>comments_clean <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> comment <span class="token keyword">in</span> comments<span class="token punctuation">:</span>    comment <span class="token operator">=</span> comment<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    comments_clean<span class="token punctuation">.</span>append<span class="token punctuation">(</span>comment<span class="token punctuation">)</span>    comments_clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查看一些各个词的频率</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdcipin <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'danmu'</span><span class="token punctuation">:</span>comments_clean<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>cipin<span class="token punctuation">[</span><span class="token string">'danmu'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用jieba分词，并过滤单个字符</span><span class="token keyword">import</span> jiebatotal_str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>comments_clean<span class="token punctuation">)</span>words <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>total_str<span class="token punctuation">)</span><span class="token punctuation">)</span>fnl_words <span class="token operator">=</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word <span class="token keyword">in</span> words <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">]</span>fnl_words<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、生成词云"><a href="#五、生成词云" class="headerlink" title="五、生成词云"></a>五、生成词云</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">import</span> wordcloud<span class="token comment"># 这里我们把词云生成一个圆的形状</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"yuan.png"</span><span class="token punctuation">)</span>resized <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">)</span>wc_1 <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>    background_color<span class="token operator">=</span><span class="token string">'black'</span><span class="token punctuation">,</span>    width<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>    height<span class="token operator">=</span><span class="token number">800</span><span class="token punctuation">,</span>    mask<span class="token operator">=</span>resized<span class="token punctuation">,</span>    font_path<span class="token operator">=</span><span class="token string">'simfang.ttf'</span><span class="token punctuation">)</span><span class="token comment"># 导入我们的词列表</span>wc_1<span class="token punctuation">.</span>generate_from_text<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>fnl_words<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>wc_1<span class="token punctuation">)</span><span class="token comment"># 不显示坐标轴</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 储存为png图片</span>wc_1<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">'wordcloud-res.png'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/01/30/9rJFXwKLg3N7Pzv.png" alt="wordcloud-res.png"></p><div id='refer-anchor-1'> </div>## References<p>[1] <a href="https://blog.csdn.net/m0_50944918/article/details/110747420">python 爬虫 哔哩哔哩弹幕爬取69岁老同志视频弹幕</a></p><p>[2] <a href="https://blog.csdn.net/johnchang0201/article/details/103004229">python爬虫：bilibili弹幕爬取+词云生成</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bilibili弹幕词云&quot;&gt;&lt;a href=&quot;#bilibili弹幕词云&quot; class=&quot;headerlink&quot; title=&quot;bilibili弹幕词云&quot;&gt;&lt;/a&gt;bilibili弹幕词云&lt;/h1&gt;&lt;h1 id=&quot;工作原理&quot;&gt;&lt;a href=&quot;#工作原理&quot; cla</summary>
      
    
    
    
    
    <category term="python" scheme="https://zhangchaofan01.gitee.io/tags/python/"/>
    
    <category term="词云" scheme="https://zhangchaofan01.gitee.io/tags/%E8%AF%8D%E4%BA%91/"/>
    
  </entry>
  
</feed>
